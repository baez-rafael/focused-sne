{"cells":[{"cell_type":"code","source":["# !curl -L -o Wine.zip https://www.dropbox.com/sh/fv4rsc6w63tmhw7/AACsOhfnMYWJwylri1UIYRxGa\n","# %cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN/embeddings/Wine/\n","# !unzip Wine.zip"],"metadata":{"id":"16jdpxy31wWy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# !curl -L -o 20News.zip https://www.dropbox.com/sh/vxwl3h9prs2six7/AAChAbHT5LcdqltznwvAuZsQa\n","# %cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN/embeddings/20News/\n","# !unzip 20News.zip "],"metadata":{"id":"LE0988U6sAdp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# %cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN/embeddings/mnist/\n","# !curl -L -o mnist.zip https://www.dropbox.com/sh/ct950kgz48raljm/AAAH7_sV-QkKMNnV57-ANo4ta\n","# !unzip mnist.zip "],"metadata":{"id":"EFyAQrnIRqcM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# %cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN/\n","# !wget -N -c https://www.dropbox.com/s/do3vs40l6ebnsh4/fSNE_exp.zip\n","# !wget -N -c https://www.dropbox.com/s/14jrt3vexb6kn2l/Wine_fSNE_SNE.zip\n","# !unzip fSNE_exp.zip\n","# !unzip Wine_fSNE_SNE.zip"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fLWWGwlbcBrB","executionInfo":{"status":"ok","timestamp":1659627209972,"user_tz":360,"elapsed":57,"user":{"displayName":"Sanuj Srivastava","userId":"08803169451927669133"}},"outputId":"6ee915c0-3516-489e-b6c1-54c754504323"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN\n"]}]},{"cell_type":"code","source":["# %cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN/\n","# !wget -N -c https://www.dropbox.com/s/0uote70nw2nj1ff/20News_fSNE_SNE.zip\n","# !unzip 20News_fSNE_SNE.zip"],"metadata":{"id":"WXNYa1xxrWfK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# %cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN/\n","# !wget -N -c https://www.dropbox.com/s/29t5evr9nfzbny8/mnist5000_fSNE_SNE.zip\n","# !unzip mnist5000_fSNE_SNE.zip"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZrBx4FxeR2mJ","executionInfo":{"status":"ok","timestamp":1659841791413,"user_tz":360,"elapsed":1453,"user":{"displayName":"Sanuj Srivastava","userId":"08803169451927669133"}},"outputId":"5ef05165-c2ed-4bf5-fa6f-86cf07a3a518"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Archive:  mnist5000_fSNE_SNE.zip\n","  inflating: mnist1.npy              \n","  inflating: mnist2.npy              \n","  inflating: mnist3.npy              \n"]}]},{"cell_type":"code","source":["%cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN/results/\n","!curl -L -o 20News_LAPS_kNN.zip https://www.dropbox.com/sh/4tvjl5ym4bu1myq/AADl7GaxbySBhzxkYh0uQAWca\n","!unzip 20News_LAPS_kNN.zip"],"metadata":{"id":"TUPauZbM_1Ep"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"akl5ZFdnSU-K"},"outputs":[],"source":["import warnings\n","warnings.filterwarnings('ignore')\n","import sys\n","# %matplotlib inline\n","\n","### pickle\n","\n","import bz2\n","import pickle\n","# !pip install pickle5\n","import pickle5\n","import _pickle as cPickle\n","import numpy as np\n","import pandas as pd\n","\n","import seaborn as sb\n","from matplotlib import pyplot as plt\n","\n","import math\n","import time\n","\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import accuracy_score\n","import argparse\n","import os\n","\n","# sys.path.append(r'../') \n","from src import Preprocessing, Distances, Explanation, DR_algorithms, genericMethods\n","from src.LAPS_tabular import LapsExplainer\n","from src.GAPS_tabular import GapsExplainer\n","from src.GAPS_Explanation import get_local_explanations_for_GAPS, compute_local_divergences\n","\n","def save_obj(obj, name):\n","    with open(name + '.pkl', 'wb') as f:\n","        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)\n","\n","def load_obj(name):\n","    with open(name + '.pkl', 'rb') as f:\n","        return pickle.load(f)\n","\n","def load_obj_pkl5(name):\n","    with open(name + '.pkl', 'rb') as f:\n","        return pickle5.load(f)\n","\n","def compressed_pickle(data,title):\n","  with bz2.BZ2File(title + '.pbz2', 'w') as f: \n","    cPickle.dump(data, f)\n","\n","def decompress_pickle(file):\n"," data = bz2.BZ2File(file+'.pbz2', 'rb')\n"," data = cPickle.load(data)\n"," return data\n","\n","def is_notebook():\n","  try:\n","    shell = get_ipython().__class__.__name__\n","    if shell == 'ZMQInteractiveShell':\n","      return True   # Jupyter notebook or qtconsole\n","    elif shell == 'TerminalInteractiveShell':\n","      return False  # Terminal running IPython\n","    else:\n","      return False  # Other type (?)\n","  except NameError:\n","    return False\n","if is_notebook():\n","    from tqdm.notebook import tqdm\n","else:\n","    from tqdm import tqdm"]},{"cell_type":"code","source":["def visualization(embeddings,POI,labels):   \n","  unique_labels = list(set(labels))\n","  labels_dict_o = {}\n","  for l in unique_labels:\n","    if l==99:\n","      labels_dict_o[l] ='C99'#+str(unique_labels.index(l))\n","    else:\n","      labels_dict_o[l] ='C'+str(unique_labels.index(l))\n","  POI_vis = embeddings[POI]\n","  fig, ax = plt.subplots(figsize=(20, 20))\n","  sb.scatterplot(ax=ax,x=embeddings[:,0],y=embeddings[:,1],hue=labels,alpha=0.8,palette=labels_dict_o,s=50)      \n","  ax.scatter(POI_vis[:, 0], POI_vis[:, 1], alpha=1.0,  edgecolors='black', facecolors='none', s=50)\n","\n","\n","\n","## pass embedding from model, params[5] are POIs indexes , aug_labels are integer labels with 99 as label for POI\n","visualization(embedding_fsne,params[5],aug_labels) "],"metadata":{"id":"dq0wrI4efCQM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sb.scatterplot(x=embedding_fsne[:,0],y=embedding_fsne[:,1])#,hue=labels,alpha=0.8,palette=labels_dict_o,s=50)   "],"metadata":{"id":"YisaSDdjnF9D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["visualization(embedding_fsne,params[5],aug_labels)"],"metadata":{"id":"1t2gNQGlgVvf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# visualization(embedding_sne,params[5],aug_labels)"],"metadata":{"id":"VTnGfNwSibGc"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eV62nK1pUgme"},"outputs":[],"source":["def LAPS(embedding, data_transformed, data_df, y_res, model_feats, targ, cat_feats, cat_names, num_feats, points, neighbors = 20, show_fig = False, verbose = False, filename='file'):\n","  exp = LapsExplainer(data_df.values, feature_names=model_feats, class_names=targ, \n","                      categorical_features=cat_feats, categorical_names=cat_names, \n","                      discretize_continuous=False, discretizer='quartile', random_state=42)\n","  laps_scores_all = []\n","  comp_scores_all = []\n","  bar = tqdm(range(len(points)))\n","\n","  for i in bar:\n","    point = points[i]\n","    start = time.time()\n","    neigh, neigh_emb, over_data, over_data_emb = exp.generate_perturbed_neighborhood(data_df.values, data_transformed, embedding, \n","                                                                                    point, data_df.values[point], nbrs=neighbors, \n","                                                                                    num_features=5, verbose = verbose)\n","    corr_feat_dist, _, _, _, _ = Explanation.explain_point_local(data_df.values[point], neigh, over_data, \n","                                                                model_feats, cat_feats, num_feats)\n","    corr_feat_dist_embd, _, _, _, _ = Explanation.explain_point_local(data_df.values[point], neigh_emb, over_data_emb, \n","                                                                      model_feats, cat_feats, num_feats)\n","    components, divergence = Explanation.compute_local_divergence(corr_feat_dist, corr_feat_dist_embd, \n","                                                                  neigh, neigh_emb)\n","    components = components.split(\",\")\n","    laps_scores_all.append(divergence)\n","    comp_scores_all.append(components)\n","  return comp_scores_all, laps_scores_all\n","    \n","\n","\n","def GAPS_score(embedding, data_transformed, data_df,  model_feats, target, cat_feats, cat_names, num_feats, POI = None, neighbors = 30, num_samples = 50, show_fig = False):\n","  if POI is None:\n","    rep_subset = genericMethods.generate_representative_subset(18, data_df)\n","    data_instance_numbers = rep_subset[0]\n","  else:\n","    data_instance_numbers = POI\n","\n","\n","  explainer = GapsExplainer(data_df.values, feature_names=model_feats,\n","                            class_names=target, categorical_features=cat_feats,\n","                            discretize_continuous=False, discretizer='quartile',\n","                            random_state=42)\n","\n","  neigh, neigh_emb, over_data, over_data_emb, local_feat_cont, local_feat_cont_emb, neigh_local, neigh_emb_local = explainer.generate_perturbed_neighborhood_global(\n","      data_df.values, data_transformed, embedding, data_instance_numbers, model_feats, cat_feats, num_feats, nbrs = neighbors, num_features = 5, num_samples=num_samples)\n","\n","  local_divergences = compute_local_divergences(neigh_local, neigh_emb_local, local_feat_cont, local_feat_cont_emb)\n","\n","  corr_feat_dist, _, _ = Explanation.explain_point_global(over_data, model_feats, cat_feats, num_feats)\n","  corr_feat_dist_embd, _, _ = Explanation.explain_point_global(over_data_emb, model_feats, cat_feats, num_feats)\n","\n","  components, overall_divergence = Explanation.compute_global_divergence(corr_feat_dist, corr_feat_dist_embd, neigh, neigh_emb, local_divergences)\n","  components = components.split(',')\n","  return components, overall_divergence\n","\n","def vis_cal_knn(coordinate, label):\n","    output = []\n","    for n_neighbors in [10, 20, 30, 40, 50]:\n","        neigh = KNeighborsClassifier(n_neighbors=n_neighbors, n_jobs=-1)\n","        neigh.fit(coordinate, label)\n","        output.append(neigh.score(coordinate, label))\n","    return output\n","\n","def visualization(embeddings,POI,labels):   \n","  unique_labels = list(set(labels))\n","  labels_dict_o = {}\n","  # labels_noPOI = list(filter((99).__ne__, labels)) \n","  for l in unique_labels:\n","    if l==99:\n","      # continue\n","      labels_dict_o[l] ='C99'#+str(unique_labels.index(l))\n","    else:\n","      labels_dict_o[l] ='C'+str(unique_labels.index(l))\n","  POI_vis = embeddings[POI]\n","  fig, ax = plt.subplots(figsize=(20, 20))\n","  sb.scatterplot(ax=ax,x=embeddings[:,0],y=embeddings[:,1],hue=labels,alpha=0.8,palette=labels_dict_o,s=50)      \n","  ax.scatter(POI_vis[:, 0], POI_vis[:, 1], alpha=1.0,  edgecolors='black', facecolors='none', s=50)\n","\n","def get_LAPS_GAPS_kNN(model,embedding,X_transformed,params,aug_labels,perp,show_fig=False,filename='file'):\n","  p = int(perp)\n","  params[0] = pd.DataFrame(params[0]) \n","  print('\\nRunning LAPS...\\n')\n","  _, laps_div = LAPS(embedding, X_transformed,\n","                                      params[0], np.asarray(aug_labels), \n","                                      params[2], params[3],\n","                                      [], [],\n","                                      params[4], params[5],\n","                                      neighbors = p, show_fig = False, verbose = False,filename=filename)\n","\n","  print('\\nRunning GAPS...\\n')\n","  params[0] = pd.DataFrame(params[0])\n","  _, gaps_div = GAPS_score(embedding_fsne, X_transformed, \n","                        params[0], params[2],\n","                        params[3], [],\n","                        [], params[4],\n","                        params[5], neighbors = int(perp), num_samples = 5, show_fig=False)\n","  \n","\n","  orig_neigh = KNeighborsClassifier(n_neighbors=p)\n","  orig_neigh.fit(X_transformed, params[1])\n","  orig_pred = orig_neigh.predict(X_transformed[params[5]])\n","\n","  neigh = KNeighborsClassifier(n_neighbors=p)\n","  neigh.fit(embedding, params[1])\n","  new_pred = neigh.predict(embedding[params[5]])\n","\n","  laps = f'{np.mean(laps_div):.5f}'\n","  knn = f'{accuracy_score(orig_pred, new_pred)}'\n","  gaps = f'{np.mean(gaps_div):.5f}'\n","\n","  print(\"#########\\n\",model)\n","  print('laps score - ',laps)\n","  # print('knn accuracy score - ',knn)\n","  print('visualization kNN -',vis_cal_knn(embedding,params[1]))\n","  print('GAPS score - ',gaps)"]},{"cell_type":"code","source":["# parser = argparse.ArgumentParser(description=\"LAPS kNN Visualization GAPS\")\n","# parser.add_argument('--data', default=str) # Wine\n","# parser.add_argument('--run', default=str)\n","# parser.add_argument('--poi', default=str)\n","# parser.add_argument('--perp', default=str)\n","# parser.add_argument('--model', default=str)\n","# args = parser.parse_args()\n","# num_nodes = args.num_nodes\n","\n","# data_dir = args.data #'Wine'\n","# run = args.run #'1'\n","# poi = args.poi #'1'\n","# perp = args.perp #'10'\n","# model = args.model # 'fSNE'\n","\n","data_dir = 'cifar'\n","data_name = 'cifar'\n","run = '1'\n","poi = '1'\n","perp = '10'\n","\n","if data_dir == '20News':\n","  data_name = '20news'\n","else:\n","  data_name = data_dir\n","\n","os.chdir('/home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN/')#embeddings/'+data_dir+'/lr0.05/fsne')\n","embedding_fsne = decompress_pickle('@1_'+data_name+poi+'-fsne-run_'+run+'_perp'+perp)\n","\n","# os.chdir('/home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN/embeddings/'+data_dir+'/lr0.05/sne')\n","# embedding_sne = decompress_pickle(data_name+poi+'-sne-run_'+run+'_perp'+perp)\n","\n","os.chdir('/home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN/npy_data/')\n","data_perp = dict(np.load(data_dir+poi+'.npy',allow_pickle=True).item())\n","X_transformed, params, aug_labels = data_perp[list(data_perp.keys())[0]]"],"metadata":{"id":"cZfJVg_n3P6x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model='fsne'\n","filename= model+\"_data_\"+data_dir+\"_poi_\"+poi+\"_perp_\"+\"run_\"+run\n","os.makedirs('/home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN/results/'+data_dir+'/'+model+\"/\",exist_ok=True)\n","os.chdir('/home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN/results/'+data_dir+'/'+model+\"/\")\n","get_LAPS_GAPS_kNN(model,embedding_fsne,X_transformed[:100][:,:10], params, aug_labels,perp,show_fig=True,filename=filename)"],"metadata":{"id":"MJF5bjjEwHuc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = 'sne'\n","filename= model+\"_data_\"+data_dir+\"_poi_\"+poi+\"_perp_\"+\"run_\"+run\n","os.makedirs('/home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN/results/'+data_dir+'/'+model+\"/\",exist_ok=True)\n","os.chdir('/home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN/results/'+data_dir+'/'+model+\"/\")\n","get_LAPS_GAPS_kNN(model,embedding_sne,X_transformed, params, aug_labels,perp,show_fig=True,filename=filename)"],"metadata":{"id":"fTr7ut3Ps-v2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","from os import listdir\n","from os.path import isfile, join\n","import ast\n","import numpy as np\n","\n","\n","model = ['sne']#,'sne']\n","data = ['mnist']#,'Wine']\n","run = ['1','2','3']\n","poi = ['1','2','3']\n","perp = ['10','20','30','40','50'] #\n","\n","mypath = '/home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN/results/'+data[0]+'/'+model[0]\n","os.chdir(mypath)\n","# onlyfiles = sorted([f for f in listdir(mypath) if isfile(join(mypath, f))])\n","# for o in onlyfiles:\n","for d in data:\n","  for po in poi:\n","    for pe in perp:\n","      for m in model:\n","        for r in run:\n","          if d == '20News':\n","            filename = m+'_data_'+d+\"_poi_\"+po+\"_perp_\"+pe+\"_run_\"+r+\".txt\"\n","          else: \n","            filename = 'out_'+d+\"_\"+po+\"_\"+pe+\"_\"+m+\"_run\"+r+\".txt\"\n","          with open(filename,'r') as f:\n","            content=f.readlines() \n","            content = [x.strip() for x in content]\n","            content =  list(filter(None, content))\n","            for c in content:\n","              if 'laps score' in c:\n","                laps_score = float(c.split('-')[1].strip())\n","              if 'GAPS score' in c:\n","                gaps_score = float(c.split('-')[1].strip())\n","              if 'visualization kNN' in c:\n","                visualization_kNN = ast.literal_eval(c.split('-')[1].strip())\n","            print(np.mean(visualization_kNN),end='\\t')\n","            # print(laps_score,end='\\t')\n","        print()\n","    print()\n","    print()\n","    print()"],"metadata":{"id":"fqwuScI6iF0D","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1659974554256,"user_tz":360,"elapsed":48,"user":{"displayName":"Sanuj Srivastava","userId":"08803169451927669133"}},"outputId":"18f6dbbc-7e0c-4c7a-8d94-2ceba5dc6bb6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.78356\t0.78312\t0.73328\t\n","0.75148\t0.76848\t0.7779999999999999\t\n","0.7434000000000001\t0.74344\t0.73804\t\n","0.72504\t0.7336799999999999\t0.73408\t\n","0.7219999999999999\t0.72104\t0.71424\t\n","\n","\n","\n","0.7721199999999999\t0.7699999999999999\t0.79796\t\n","0.75984\t0.75888\t0.77456\t\n","0.7312000000000001\t0.7798\t0.7476399999999999\t\n","0.71288\t0.72876\t0.7117199999999999\t\n","0.70392\t0.70368\t0.72328\t\n","\n","\n","\n","0.77892\t0.7720800000000001\t0.764\t\n","0.7609600000000001\t0.7623599999999999\t0.74568\t\n","0.74556\t0.72244\t0.72168\t\n","0.71248\t0.73068\t0.71168\t\n","0.68072\t0.70748\t0.70232\t\n","\n","\n","\n"]}]},{"cell_type":"code","source":["# onlyfiles"],"metadata":{"id":"uzFRVx9O1oTA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from os import listdir\n","from os.path import isfile, join\n","mypath = '/home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN/results/Wine/sne'\n","onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]\n","os.chdir(mypath)\n","for o in onlyfiles:\n","  with open(o,'r') as f:\n","    content=f.readlines() \n","    if 'GAPS score' not in content[-1]:\n","      print(o)"],"metadata":{"id":"TLntD7uQibPM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"8REmfnL61i81"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# from sklearn.neighbors import NearestNeighbors\n","# knn = NearestNeighbors(leaf_size=30, n_neighbors=10, p=2, radius=1.0, algorithm='ball_tree')\n","# transformed_data = X_transformed[:100][:,:10]\n","# knn.fit(transformed_data)\n","# neigh = knn.kneighbors(transformed_data, return_distance=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yw9yohS7DhBZ","executionInfo":{"status":"ok","timestamp":1659654676806,"user_tz":360,"elapsed":9,"user":{"displayName":"Sanuj Srivastava","userId":"08803169451927669133"}},"outputId":"c6d3faec-7603-4463-fe3d-67408305d755"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["NearestNeighbors(algorithm='ball_tree', n_neighbors=10)"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["import numpy as np\n","import faiss\n","\n","\n","class FaissKNeighbors:\n","    def __init__(self, k=5):\n","        self.index = None\n","        self.y = None\n","        self.k = k\n","\n","    def fit(self, X):\n","        self.index = faiss.IndexFlatL2(X.shape[1])\n","        self.index.add(X.astype(np.float32))\n","        \n","\n","    def predict(self, X):\n","        distances, indices = self.index.search(X.astype(np.float32), k=self.k)\n","        votes = self.y[indices]\n","        predictions = np.array([np.argmax(np.bincount(x)) for x in votes])\n","        return predictions"],"metadata":{"id":"n_EXRsSEGFFi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X = transformed_data\n","index = faiss.IndexFlatL2(X.shape[1])\n","index.add(X.astype(np.float32))\n","# distances, indices = index.search(X.astype(np.float32), k=10)"],"metadata":{"id":"osxxdS_XGzWB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","import scipy.spatial\n","\n","\n","def nearest_neighbors(arr, k):\n","    k_lst = list(range(k + 2))[2:]  # [2,3]\n","    neighbors = []\n","\n","    for row in arr:\n","        # stack the data so each element is in its own row\n","        data = np.vstack(row)\n","        # construct a kd-tree\n","        tree = scipy.spatial.cKDTree(data)\n","        # find k nearest neighbors for each element of data, squeezing out the zero result (the first nearest neighbor is always itself)\n","        dd, ii = tree.query(data, k=k_lst)\n","        # apply an index filter on data to get the nearest neighbor elements\n","        closest = data[ii].reshape(-1, k)\n","        neighbors.append(closest)\n","    return np.stack(neighbors)\n","\n","\n","# N = 1000\n","k = 10\n","# A = np.random.random((N, N))\n","nearest_neighbors(transformed_data, 9)"],"metadata":{"id":"eW2GOnshEdle"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# %cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN\n","!python3 run_LAPS_kNN_GAPS_vis.py --data mnist --poi 1 --perp 40 --model fsne --run 1 > ./results/mnist/fsne/out_mnist_1_40_fsne_run1.txt"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hjd69mB0S_Wj","outputId":"779873ae-1b7d-4c07-ae2f-7a4597e8025b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["  2%|▊                                        | 2/100 [01:20<1:02:30, 38.27s/it]"]}]},{"cell_type":"code","source":["machines_needed"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"soPvNzhDZoxy","executionInfo":{"status":"ok","timestamp":1659843815848,"user_tz":360,"elapsed":160,"user":{"displayName":"Sanuj Srivastava","userId":"08803169451927669133"}},"outputId":"b5cfaa8e-0d52-4383-b56d-9efdf77b6d9d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["14"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["import os\n","print('cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN; conda activate cuda;')\n","model = ['fsne','sne']\n","data = ['mnist']#,'20News']#,'Wine']\n","run = ['1','2','3']\n","poi = ['1','2','3']\n","# perp = ['10','20','30','40'] #\n","perp = ['50'] \n","\n","c = 1\n","machines_needed = 0\n","for d in data:\n","  for po in poi:\n","    for pe in perp:\n","      for m in model:\n","        os.makedirs('/home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN/results/'+d+'/'+m,exist_ok=True)\n","        for r in run:\n","          print('nohup python3 run_LAPS_kNN_GAPS_vis.py --data '+d+' --poi '+po+' --perp '+pe+' --model '+m+' --run '+r+' > ./results/'+d+'/'+m+'/'+'out_'+d+\"_\"+po+\"_\"+pe+\"_\"+m+\"_run\"+r+\".txt &\")\n","          c=c+1\n","          if c == 3:\n","            machines_needed+=1\n","            print()\n","            print('cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN; conda activate cuda;')\n","            c = 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zg-CvePDsn9b","executionInfo":{"status":"ok","timestamp":1659972107929,"user_tz":360,"elapsed":62,"user":{"displayName":"Sanuj Srivastava","userId":"08803169451927669133"}},"outputId":"29b4bded-777b-4feb-e8da-3c0cf4a7138f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN; conda activate cuda;\n","nohup python3 run_LAPS_kNN_GAPS_vis.py --data mnist --poi 1 --perp 50 --model fsne --run 1 > ./results/mnist/fsne/out_mnist_1_50_fsne_run1.txt &\n","nohup python3 run_LAPS_kNN_GAPS_vis.py --data mnist --poi 1 --perp 50 --model fsne --run 2 > ./results/mnist/fsne/out_mnist_1_50_fsne_run2.txt &\n","\n","cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN; conda activate cuda;\n","nohup python3 run_LAPS_kNN_GAPS_vis.py --data mnist --poi 1 --perp 50 --model fsne --run 3 > ./results/mnist/fsne/out_mnist_1_50_fsne_run3.txt &\n","nohup python3 run_LAPS_kNN_GAPS_vis.py --data mnist --poi 1 --perp 50 --model sne --run 1 > ./results/mnist/sne/out_mnist_1_50_sne_run1.txt &\n","\n","cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN; conda activate cuda;\n","nohup python3 run_LAPS_kNN_GAPS_vis.py --data mnist --poi 1 --perp 50 --model sne --run 2 > ./results/mnist/sne/out_mnist_1_50_sne_run2.txt &\n","nohup python3 run_LAPS_kNN_GAPS_vis.py --data mnist --poi 1 --perp 50 --model sne --run 3 > ./results/mnist/sne/out_mnist_1_50_sne_run3.txt &\n","\n","cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN; conda activate cuda;\n","nohup python3 run_LAPS_kNN_GAPS_vis.py --data mnist --poi 2 --perp 50 --model fsne --run 1 > ./results/mnist/fsne/out_mnist_2_50_fsne_run1.txt &\n","nohup python3 run_LAPS_kNN_GAPS_vis.py --data mnist --poi 2 --perp 50 --model fsne --run 2 > ./results/mnist/fsne/out_mnist_2_50_fsne_run2.txt &\n","\n","cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN; conda activate cuda;\n","nohup python3 run_LAPS_kNN_GAPS_vis.py --data mnist --poi 2 --perp 50 --model fsne --run 3 > ./results/mnist/fsne/out_mnist_2_50_fsne_run3.txt &\n","nohup python3 run_LAPS_kNN_GAPS_vis.py --data mnist --poi 2 --perp 50 --model sne --run 1 > ./results/mnist/sne/out_mnist_2_50_sne_run1.txt &\n","\n","cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN; conda activate cuda;\n","nohup python3 run_LAPS_kNN_GAPS_vis.py --data mnist --poi 2 --perp 50 --model sne --run 2 > ./results/mnist/sne/out_mnist_2_50_sne_run2.txt &\n","nohup python3 run_LAPS_kNN_GAPS_vis.py --data mnist --poi 2 --perp 50 --model sne --run 3 > ./results/mnist/sne/out_mnist_2_50_sne_run3.txt &\n","\n","cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN; conda activate cuda;\n","nohup python3 run_LAPS_kNN_GAPS_vis.py --data mnist --poi 3 --perp 50 --model fsne --run 1 > ./results/mnist/fsne/out_mnist_3_50_fsne_run1.txt &\n","nohup python3 run_LAPS_kNN_GAPS_vis.py --data mnist --poi 3 --perp 50 --model fsne --run 2 > ./results/mnist/fsne/out_mnist_3_50_fsne_run2.txt &\n","\n","cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN; conda activate cuda;\n","nohup python3 run_LAPS_kNN_GAPS_vis.py --data mnist --poi 3 --perp 50 --model fsne --run 3 > ./results/mnist/fsne/out_mnist_3_50_fsne_run3.txt &\n","nohup python3 run_LAPS_kNN_GAPS_vis.py --data mnist --poi 3 --perp 50 --model sne --run 1 > ./results/mnist/sne/out_mnist_3_50_sne_run1.txt &\n","\n","cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN; conda activate cuda;\n","nohup python3 run_LAPS_kNN_GAPS_vis.py --data mnist --poi 3 --perp 50 --model sne --run 2 > ./results/mnist/sne/out_mnist_3_50_sne_run2.txt &\n","nohup python3 run_LAPS_kNN_GAPS_vis.py --data mnist --poi 3 --perp 50 --model sne --run 3 > ./results/mnist/sne/out_mnist_3_50_sne_run3.txt &\n","\n","cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN; conda activate cuda;\n"]}]},{"cell_type":"code","source":["cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN; conda activate cuda;\n","nohup python3 run_LAPS_kNN_GAPS_vis.py --data 20News --poi 1 --perp 50 --model fsne --run 1 > ./results/20News/fsne/out_20News_1_50_fsne_run1.txt &\n"],"metadata":{"id":"o0YIeEkKqBQu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN; conda activate cuda;\n","# nohup python3 run_LAPS_kNN_GAPS_vis.py --data 20News --poi 3 --perp 50 --model fsne --run 1 > ./results/20News/fsne/out_20News_3_50_fsne_run1.txt &\n","\n","# cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN; conda activate cuda;\n","# nohup python3 run_LAPS_kNN_GAPS_vis.py --data 20News --poi 3 --perp 50 --model fsne --run 2 > ./results/20News/fsne/out_20News_3_50_fsne_run2.txt &\n","\n","# cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN; conda activate cuda;\n","# nohup python3 run_LAPS_kNN_GAPS_vis.py --data 20News --poi 3 --perp 50 --model fsne --run 3 > ./results/20News/fsne/out_20News_3_50_fsne_run3.txt &\n","\n","# cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN; conda activate cuda;\n","# nohup python3 run_LAPS_kNN_GAPS_vis.py --data 20News --poi 3 --perp 50 --model sne --run 1 > ./results/20News/sne/out_20News_3_50_sne_run1.txt &\n","\n","# cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN; conda activate cuda;\n","# nohup python3 run_LAPS_kNN_GAPS_vis.py --data 20News --poi 3 --perp 50 --model sne --run 2 > ./results/20News/sne/out_20News_3_50_sne_run2.txt &\n","\n","# cd /home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN; conda activate cuda;\n","# nohup python3 run_LAPS_kNN_GAPS_vis.py --data 20News --poi 3 --perp 50 --model sne --run 3 > ./results/20News/sne/out_20News_3_50_sne_run3.txt &\n"],"metadata":{"id":"UVuqaB86qGlM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# model = 'fSNE'\n","filename= model+\"_data_\"+data+\"_poi_\"+poi+\"_perp_\"+\"run_\"+run\n","os.makedirs('/home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN/results/'+data+'/'+model+\"/\",exist_ok=True)\n","os.chdir('/home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN/results/'+data+'/'+model+\"/\")\n","get_LAPS_GAPS_kNN(model,embedding_fsne,X_transformed, params, aug_labels,perp,show_fig=True,filename=filename)\n","\n","# model = 'SNE'\n","# filename= model+\"_data_\"+data+\"_poi_\"+poi+\"_perp_\"+\"run_\"+run\n","# os.makedirs('/home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN/results/'+data+'/'+model+\"/\",exist_ok=True)\n","# os.chdir('/home/student_no_backup/sakumar/REU2022/LAPS_GAPS_kNN/results/'+data+'/'+model+\"/\")\n","# get_LAPS_GAPS_kNN(model,embedding_sne,X_transformed, params, aug_labels,perp,show_fig=True,filename=filename)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":49,"referenced_widgets":["b17ec10b6aef42289e1118555ba7c7f6","4c50f09904084cc297a01357be2aaa96","3818bb68902c4b8c8cce923c96f6e820","ce0ba9a9e521435c92a0ea7bfa91d3dc","5a4b85982f464506b221cae9f7b6feb7","36e3955040204ea4b4bf3bead62c6bc0","bd7586a30aee4e54806926b220eefd3e","36d2c160ec794b2189a2b9b97289fd3c","3a9b25a2b4a04da8adda198d046bb086","082e64d925fd47bca0cdd1b9b0917e30","72adf3d82a374e178f296f6d7a5daeb6"]},"id":"ggmue1h_Jhiq","outputId":"b4110af9-a54e-4bbb-ec3f-c43ca72dc022"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/100 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b17ec10b6aef42289e1118555ba7c7f6"}},"metadata":{}}]},{"cell_type":"code","source":[""],"metadata":{"id":"TWWzr031tD5D"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## finalResults.xlsx"],"metadata":{"id":"_cq6JfWWAaQy"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"_j9vTpBEUjAx"},"outputs":[],"source":["def load_data(data_path = Data_path, dataset_name = 'breast_cancer', amountPOI = 100, seed = 2022, max_samples = 10000):\n","  if dataset_name == 'spam':\n","    df = pd.DataFrame(spam_data)\n","  elif dataset_name == 'sentiment':\n","    df = pd.DataFrame(sentiment_data)\n","  else:\n","    df = pd.read_csv(data_path + dataset_name + '.csv')\n","  df = df.fillna(0)\n","  if df.shape[0] > max_samples:\n","    df = df.sample(max_samples)\n","  df.reset_index(inplace = True, drop = True)\n","  df.head()\n","  \n","  model_features, target = Preprocessing.set_features_and_target(df)\n","\n","  y = (df[target].values.reshape(-1, ))\n","  X_df = pd.DataFrame(df, columns=model_features)\n","\n","  np.random.seed(seed)\n","  POI = np.random.randint(0, X_df.shape[0], amountPOI)\n","\n","  X_transformed, categorical_features, numeric_features, categorical_names = Preprocessing.identify_and_transform_features(df, model_features)\n","\n","  params = [X_df, y, model_features, target, categorical_features, categorical_names, numeric_features, POI]\n","  return X_transformed, params"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"R7WNPzKzUlG4"},"outputs":[],"source":["from fSNE_torch import fSNE_torch"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JNw_LZv9U1Os"},"outputs":[],"source":["#datasets = ['breast_cancer.csv', 'Credit_card.csv', 'Magic.csv', 'Wine_Quality.csv', 'spam', 'sentiment']\n","#datasets = ['spam', 'sentiment']\n","dr_algo_name = ['fSNE','SNE']\n","perplexities = [10,20,30,40,50]\n","iterations = 1000\n","amountPOI = 100"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rWpZKTJpU31p"},"outputs":[],"source":["from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import accuracy_score\n","datas_perp = np.load(Data_path+'spec_datasets_perp.npy', allow_pickle=True).item()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WYau58ptFhRn"},"outputs":[],"source":["laps_scores = np.load(Data_path+'laps_scores2.npy', allow_pickle=True)\n","knn_score = np.load(Data_path+'knn_scores2.npy', allow_pickle=True)\n","embeddings = np.load(Data_path+'embs2.npy', allow_pickle=True)\n","laps_scores = dict(laps_scores.item())\n","knn_scores = dict(knn_score.item())\n","embeddings = dict(embeddings.item())\n","print(laps_scores.keys())\n","print(knn_scores.keys())\n","print(embeddings.keys())\n","print(laps_scores['spam_fSNE_10'])\n","print(knn_scores['spam_fSNE_10'])\n","print(embeddings['spam_fSNE_10'])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LFAdtY-OVEmR"},"outputs":[],"source":["\n","# embeddings = {}\n","# laps_scores = {}\n","# knn_scores = {}\n","#gaps_scores = {}\n","\n","runs = 5\n","\n","for k in range(len(datasets)):\n","  (X_transformed, params) = datas_perp[datasets[k]]\n","  for p in perplexities:\n","    orig_neigh = KNeighborsClassifier(n_neighbors=p)\n","    orig_neigh.fit(X_transformed, params[1])\n","    orig_pred = orig_neigh.predict(X_transformed[params[5]])\n","    dr_algo = [fSNE_torch(X_transformed, max_iter=iterations, perp=p, POI=params[5], ES = 10, lambdas = 2),\n","               fSNE_torch(X_transformed, max_iter=iterations, perp=p, POI=[], ES = 10, lambdas = 1)]\n","    for i in range(len(dr_algo)):\n","      key = f'{datasets[k]}_{dr_algo_name[i]}_{p}'\n","      if key in embeddings.keys():\n","        print(f'Skipping {key}')\n","      else:\n","        print(f'Working on {key}')\n","        #gaps_ls = []\n","        laps_ls = []\n","        knn_ls = []\n","        embs = []\n","        for j in range(3):\n","          embedding = dr_algo[i].fit_transform()\n","          while np.isnan(embedding).any():\n","            embedding = dr_algo[i].fit_transform()\n","          embs.append(embedding)\n","          if not np.isnan(embedding).any():\n","            # _, gaps_div = GAPS_score(embedding, X_transformed, \n","            #                       params[0], params[2],\n","            #                       params[3], [],\n","            #                       [], params[4],\n","            #                       params[5], neighbors = 5, num_samples = 5, show_fig=False, verbose = False)\n","            _, laps_div = LAPS(embedding, X_transformed,\n","                                    params[0], params[1],\n","                                    params[2], params[3],\n","                                    [], [],\n","                                    params[4], params[5],\n","                                    neighbors = p, show_fig = False, verbose = False)\n","            neigh = KNeighborsClassifier(n_neighbors=p)\n","            neigh.fit(embedding, params[1])\n","            new_pred = neigh.predict(embedding[params[5]])\n","\n","            #gaps = f'{np.mean(gaps_div):.5f}'\n","            laps = f'{np.mean(laps_div):.5f}'\n","            knn = f'{accuracy_score(orig_pred, new_pred)}'\n","            \n","            #print(f'{key}')\n","            #print(f'GAPS score = {gaps}')\n","            print(f'KNN classifier score = {knn}')\n","            print(f'LAPS score = {laps}')\n","            #gaps_ls.append(gaps)\n","            knn_ls.append(knn)\n","            laps_ls.append(laps)\n","\n","        #gaps_scores[key] = gaps_ls\n","        laps_scores[key] = laps_ls\n","        knn_scores[key] = knn_ls\n","        embeddings[key] = embs\n","        np.save(Data_path+'laps_scores2', laps_scores, allow_pickle=True)\n","        np.save(Data_path+'knn_scores2', knn_scores, allow_pickle=True)\n","        np.save(Data_path+'embs2', embeddings, allow_pickle=True)\n","\n","embeddings = np.load(Data_path+'embs2', allow_pickle=True).item()\n","gaps_scores = {}\n","\n","runs = 5\n","\n","for k in range(len(datasets)):\n","  (X_transformed, params) = datas_perp[datasets[k]]\n","  for p in perplexities:\n","    for i in range(len(dr_algo)):\n","      key = f'{datasets[k][:-4]}_{dr_algo_name[i]}_{p}'\n","      print(f'Working on {key}')\n","      gaps_ls = []\n","      embs = []\n","      for j in range(5):\n","        embedding = embeddings[key][j]\n","        _, gaps_div = GAPS_score(embedding, X_transformed, \n","                              params[0], params[2],\n","                              params[3], [],\n","                              [], params[4],\n","                              params[5], neighbors = 5, num_samples = 5, show_fig=False, verbose = False)\n","        gaps = f'{np.mean(gaps_div):.5f}'\n","        print(f'GAPS score = {gaps}')\n","        gaps_ls.append(gaps)\n","\n","      gaps_scores[key] = gaps_ls\n","      np.save(Data_path+'gaps_scores2', gaps_scores, allow_pickle=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_Jxwm99qYtFa"},"outputs":[],"source":["\n","# embeddings = {}\n","# laps_scores = {}\n","# knn_scores = {}\n","gaps_scores = {}\n","datasets = ['spam']\n","runs = 5\n","\n","for k in range(len(datasets)):\n","  (X_transformed, params) = datas_perp[datasets[k]]\n","  for p in perplexities:\n","    for i in range(2):\n","      key = f'{datasets[k]}_{dr_algo_name[i]}_{p}'\n","      print(f'Working on {key}')\n","      gaps_ls = []\n","      for j in range(3):\n","        embedding = embeddings[key][j]\n","\n","        _, gaps_div = GAPS_score(embedding, X_transformed, \n","                              params[0], params[2],\n","                              params[3], [],\n","                              [], params[4],\n","                              params[5], neighbors = 5, num_samples = 2, show_fig=False, verbose = False)\n","        gaps = f'{np.mean(gaps_div):.5f}'\n","        print(f'{key}')\n","        print(f'GAPS score = {gaps}')\n","        gaps_ls.append(gaps)\n","\n","\n","      gaps_scores[key] = gaps_ls\n","      np.save(Data_path+'gaps_scores', gaps_scores, allow_pickle=True)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DsckMOxKkiZ9"},"outputs":[],"source":["np.save(Data_path+'gaps_scores2', gaps_scores, allow_pickle=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1659219337727,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"},"user_tz":360},"id":"MCs16WNiyVPQ","outputId":"d1251a57-7610-4ee9-e5f3-bebb4267c218"},"outputs":[{"name":"stdout","output_type":"stream","text":["dict_keys(['sentiment_fSNE_10', 'sentiment_SNE_10', 'sentiment_fSNE_20', 'sentiment_SNE_20', 'sentiment_fSNE_30', 'sentiment_SNE_30', 'sentiment_fSNE_40', 'sentiment_SNE_40', 'sentiment_fSNE_50', 'sentiment_SNE_50'])\n","dict_keys(['spam_fSNE_10', 'spam_SNE_10', 'spam_fSNE_20', 'spam_SNE_20', 'spam_fSNE_30', 'spam_SNE_30', 'spam_fSNE_40', 'spam_SNE_40', 'spam_fSNE_50', 'spam_SNE_50'])\n"]}],"source":["dataset = 'sentiment'\n","dataset_embeddings = dict(np.load(Data_path+'embeddings_'+dataset+'.npy', allow_pickle=True).item())\n","print(dataset_embeddings.keys())\n","print(gaps_scores.keys())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"nMWGx3NkxvcG","outputId":"1b7d90a4-2c2f-4c45-9ac3-3c84f6896284"},"outputs":[{"name":"stdout","output_type":"stream","text":["Working on sentiment_fSNE_10\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_fSNE_10\n","GAPS score = 0.02353\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_fSNE_10\n","GAPS score = 0.02358\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_fSNE_10\n","GAPS score = 0.02354\n","Working on sentiment_SNE_10\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_SNE_10\n","GAPS score = 0.02205\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_SNE_10\n","GAPS score = 0.02337\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_SNE_10\n","GAPS score = 0.02301\n","Working on sentiment_fSNE_20\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_fSNE_20\n","GAPS score = 0.02292\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_fSNE_20\n","GAPS score = 0.02334\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_fSNE_20\n","GAPS score = 0.02251\n","Working on sentiment_SNE_20\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_SNE_20\n","GAPS score = 0.02232\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_SNE_20\n","GAPS score = 0.02236\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_SNE_20\n","GAPS score = 0.02307\n","Working on sentiment_fSNE_30\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_fSNE_30\n","GAPS score = 0.02282\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_fSNE_30\n","GAPS score = 0.02257\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_fSNE_30\n","GAPS score = 0.02283\n","Working on sentiment_SNE_30\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_SNE_30\n","GAPS score = 0.02259\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_SNE_30\n","GAPS score = 0.02262\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_SNE_30\n","GAPS score = 0.02268\n","Working on sentiment_fSNE_40\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_fSNE_40\n","GAPS score = 0.02271\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_fSNE_40\n","GAPS score = 0.02312\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_fSNE_40\n","GAPS score = 0.02291\n","Working on sentiment_SNE_40\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_SNE_40\n","GAPS score = 0.02270\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_SNE_40\n","GAPS score = 0.02225\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","sentiment_SNE_40\n","GAPS score = 0.02225\n","Working on sentiment_fSNE_50\n","num_samples = 2\n"]},{"ename":"KeyboardInterrupt","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-13a731a47291>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     18\u001b[0m                               \u001b[0mparams\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m                               \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m                               params[5], neighbors = 5, num_samples = 2, show_fig=False, verbose = False)\n\u001b[0m\u001b[1;32m     21\u001b[0m         \u001b[0mgaps\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf'{np.mean(gaps_div):.5f}'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'{key}'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-4-483c465254a8>\u001b[0m in \u001b[0;36mGAPS_score\u001b[0;34m(embedding, data_transformed, data_df, model_feats, target, cat_feats, cat_names, num_feats, POI, neighbors, num_samples, show_fig, verbose)\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m   neigh, neigh_emb, over_data, over_data_emb, local_feat_cont, local_feat_cont_emb, neigh_local, neigh_emb_local = explainer.generate_perturbed_neighborhood_global(\n\u001b[0;32m---> 15\u001b[0;31m       data_df.values, data_transformed, embedding, data_instance_numbers, model_feats, cat_feats, num_feats, nbrs = neighbors, num_features = 5, num_samples=num_samples, verbose = verbose)\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m   \u001b[0mlocal_divergences\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompute_local_divergences\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mneigh_local\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mneigh_emb_local\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlocal_feat_cont\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlocal_feat_cont_emb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/content/drive/MyDrive/STU_Rafae_Baez_Ramirez/New_SNE_Code/LAPS_and_GAPS-master/src/GAPS_tabular.py\u001b[0m in \u001b[0;36mgenerate_perturbed_neighborhood_global\u001b[0;34m(self, training_data, transformed_data, embedding, data_row_indexes, model_features, categorical_features, numeric_features, nbrs, num_features, num_samples, verbose)\u001b[0m\n\u001b[1;32m    205\u001b[0m         \u001b[0mknn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtransformed_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    206\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mindex\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_row_indexes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 207\u001b[0;31m             \u001b[0mglobals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"neighbors_\"\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mknn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkneighbors\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtransformed_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreturn_distance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdata_row_indexes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    208\u001b[0m             \u001b[0mglobals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"data_\"\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mglobals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"data_embd_\"\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mglobals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"inverse_\"\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mglobals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"inverse_embd_\"\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtraining_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdata_row_indexes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    209\u001b[0m         \u001b[0mknn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0membedding\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/neighbors/_base.py\u001b[0m in \u001b[0;36mkneighbors\u001b[0;34m(self, X, n_neighbors, return_distance)\u001b[0m\n\u001b[1;32m    778\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tree\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_neighbors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreturn_distance\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    779\u001b[0m                 )\n\u001b[0;32m--> 780\u001b[0;31m                 \u001b[0;32mfor\u001b[0m \u001b[0ms\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgen_even_slices\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    781\u001b[0m             )\n\u001b[1;32m    782\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1041\u001b[0m             \u001b[0;31m# remaining jobs.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1042\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1043\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1044\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1045\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[0;34m(self, iterator)\u001b[0m\n\u001b[1;32m    859\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    860\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 861\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    862\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    863\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    777\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    778\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 779\u001b[0;31m             \u001b[0mjob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    780\u001b[0m             \u001b[0;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    781\u001b[0m             \u001b[0;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[0;34m(self, func, callback)\u001b[0m\n\u001b[1;32m    206\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m         \u001b[0;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 208\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    209\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    570\u001b[0m         \u001b[0;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    571\u001b[0m         \u001b[0;31m# arguments in memory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 572\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    573\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    574\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    261\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    262\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 263\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    264\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    265\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__reduce__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    261\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    262\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 263\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    264\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    265\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__reduce__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/fixes.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    214\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconfig_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 216\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    217\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/neighbors/_base.py\u001b[0m in \u001b[0;36m_tree_query_parallel_helper\u001b[0;34m(tree, *args, **kwargs)\u001b[0m\n\u001b[1;32m    598\u001b[0m     \u001b[0munder\u001b[0m \u001b[0mPyPy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    599\u001b[0m     \"\"\"\n\u001b[0;32m--> 600\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mquery\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    601\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    602\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["dataset = 'sentiment'\n","dataset_embeddings = dict(np.load(Data_path+'embeddings_'+dataset+'.npy', allow_pickle=True).item())\n","\n","(X_transformed, params) = datas_perp[dataset]\n","for p in perplexities:\n","  for i in range(2):\n","    key = f'{dataset}_{dr_algo_name[i]}_{p}'\n","    if key in gaps_scores.keys():\n","      print(f'skipping {key}')\n","    else:\n","      print(f'Working on {key}')\n","      gaps_ls = []\n","      for j in range(3):\n","        embedding = dataset_embeddings[key][j]\n","\n","        _, gaps_div = GAPS_score(embedding, X_transformed, \n","                              params[0], params[2],\n","                              params[3], [],\n","                              [], params[4],\n","                              params[5], neighbors = 5, num_samples = 2, show_fig=False, verbose = False)\n","        gaps = f'{np.mean(gaps_div):.5f}'\n","        print(f'{key}')\n","        print(f'GAPS score = {gaps}')\n","        gaps_ls.append(gaps)\n","    np.save(Data_path+'gaps_scores3', gaps_scores, allow_pickle=True)    \n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dSL8tRtUyqJ-"},"outputs":[],"source":[""]}],"metadata":{"colab":{"collapsed_sections":["_cq6JfWWAaQy"],"name":"runsLAPSTests2","provenance":[{"file_id":"1E--GMi7RvZPFNdQJdLkvd2iUNhAj4eXA","timestamp":1659152180636}]},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"b17ec10b6aef42289e1118555ba7c7f6":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_4c50f09904084cc297a01357be2aaa96","IPY_MODEL_3818bb68902c4b8c8cce923c96f6e820","IPY_MODEL_ce0ba9a9e521435c92a0ea7bfa91d3dc"],"layout":"IPY_MODEL_5a4b85982f464506b221cae9f7b6feb7"}},"4c50f09904084cc297a01357be2aaa96":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_36e3955040204ea4b4bf3bead62c6bc0","placeholder":"​","style":"IPY_MODEL_bd7586a30aee4e54806926b220eefd3e","value":"  0%"}},"3818bb68902c4b8c8cce923c96f6e820":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_36d2c160ec794b2189a2b9b97289fd3c","max":100,"min":0,"orientation":"horizontal","style":"IPY_MODEL_3a9b25a2b4a04da8adda198d046bb086","value":0}},"ce0ba9a9e521435c92a0ea7bfa91d3dc":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_082e64d925fd47bca0cdd1b9b0917e30","placeholder":"​","style":"IPY_MODEL_72adf3d82a374e178f296f6d7a5daeb6","value":" 0/100 [00:00&lt;?, ?it/s]"}},"5a4b85982f464506b221cae9f7b6feb7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"36e3955040204ea4b4bf3bead62c6bc0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bd7586a30aee4e54806926b220eefd3e":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"36d2c160ec794b2189a2b9b97289fd3c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3a9b25a2b4a04da8adda198d046bb086":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"082e64d925fd47bca0cdd1b9b0917e30":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"72adf3d82a374e178f296f6d7a5daeb6":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat":4,"nbformat_minor":0}