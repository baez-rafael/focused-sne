{"cells":[{"cell_type":"code","execution_count":29,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15134,"status":"ok","timestamp":1659286123399,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"},"user_tz":360},"id":"akl5ZFdnSU-K","outputId":"b03de648-f35a-4d0c-c337-791dad308efa"},"outputs":[{"name":"stdout","output_type":"stream","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: umap-learn in /usr/local/lib/python3.7/dist-packages (0.5.3)\n","Requirement already satisfied: scikit-learn\u003e=0.22 in /usr/local/lib/python3.7/dist-packages (from umap-learn) (1.0.2)\n","Requirement already satisfied: scipy\u003e=1.0 in /usr/local/lib/python3.7/dist-packages (from umap-learn) (1.7.3)\n","Requirement already satisfied: numpy\u003e=1.17 in /usr/local/lib/python3.7/dist-packages (from umap-learn) (1.21.6)\n","Requirement already satisfied: numba\u003e=0.49 in /usr/local/lib/python3.7/dist-packages (from umap-learn) (0.51.2)\n","Requirement already satisfied: pynndescent\u003e=0.5 in /usr/local/lib/python3.7/dist-packages (from umap-learn) (0.5.7)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from umap-learn) (4.64.0)\n","Requirement already satisfied: llvmlite\u003c0.35,\u003e=0.34.0.dev0 in /usr/local/lib/python3.7/dist-packages (from numba\u003e=0.49-\u003eumap-learn) (0.34.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from numba\u003e=0.49-\u003eumap-learn) (57.4.0)\n","Requirement already satisfied: joblib\u003e=0.11 in /usr/local/lib/python3.7/dist-packages (from pynndescent\u003e=0.5-\u003eumap-learn) (1.1.0)\n","Requirement already satisfied: threadpoolctl\u003e=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn\u003e=0.22-\u003eumap-learn) (3.1.0)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: trimap in /usr/local/lib/python3.7/dist-packages (1.1.4)\n","Requirement already satisfied: annoy\u003e=1.11 in /usr/local/lib/python3.7/dist-packages (from trimap) (1.17.0)\n","Requirement already satisfied: numba\u003e=0.34 in /usr/local/lib/python3.7/dist-packages (from trimap) (0.51.2)\n","Requirement already satisfied: scikit-learn\u003e=0.16 in /usr/local/lib/python3.7/dist-packages (from trimap) (1.0.2)\n","Requirement already satisfied: numpy\u003e=1.15 in /usr/local/lib/python3.7/dist-packages (from numba\u003e=0.34-\u003etrimap) (1.21.6)\n","Requirement already satisfied: llvmlite\u003c0.35,\u003e=0.34.0.dev0 in /usr/local/lib/python3.7/dist-packages (from numba\u003e=0.34-\u003etrimap) (0.34.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from numba\u003e=0.34-\u003etrimap) (57.4.0)\n","Requirement already satisfied: threadpoolctl\u003e=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn\u003e=0.16-\u003etrimap) (3.1.0)\n","Requirement already satisfied: scipy\u003e=1.1.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn\u003e=0.16-\u003etrimap) (1.7.3)\n","Requirement already satisfied: joblib\u003e=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn\u003e=0.16-\u003etrimap) (1.1.0)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: nltk in /usr/local/lib/python3.7/dist-packages (3.7)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from nltk) (1.1.0)\n","Requirement already satisfied: click in /usr/local/lib/python3.7/dist-packages (from nltk) (7.1.2)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from nltk) (4.64.0)\n","Requirement already satisfied: regex\u003e=2021.8.3 in /usr/local/lib/python3.7/dist-packages (from nltk) (2022.6.2)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: gensim in /usr/local/lib/python3.7/dist-packages (3.6.0)\n","Requirement already satisfied: scipy\u003e=0.18.1 in /usr/local/lib/python3.7/dist-packages (from gensim) (1.7.3)\n","Requirement already satisfied: numpy\u003e=1.11.3 in /usr/local/lib/python3.7/dist-packages (from gensim) (1.21.6)\n","Requirement already satisfied: six\u003e=1.5.0 in /usr/local/lib/python3.7/dist-packages (from gensim) (1.15.0)\n","Requirement already satisfied: smart-open\u003e=1.2.1 in /usr/local/lib/python3.7/dist-packages (from gensim) (5.2.1)\n","The autoreload extension is already loaded. To reload it, use:\n","  %reload_ext autoreload\n","Mounted at /content/drive\n"]}],"source":["#!pip uninstall umap\n","!pip install umap-learn\n","!pip install trimap\n","!pip install nltk\n","!pip install gensim\n","\n","%load_ext autoreload\n","%autoreload 2\n","from google.colab import drive\n","drive.mount('/content/drive', force_remount=True)\n","import sys\n","sys.path.insert(1, r'/content/drive/MyDrive/STU_Rafae_Baez_Ramirez/New_SNE_Code/')\n","sys.path.insert(1, r'/content/drive/MyDrive/STU_Rafae_Baez_Ramirez/New_SNE_Code/LAPS_and_GAPS-master/')\n","\n","%matplotlib inline\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","import os\n","import sys\n","import math\n","import time\n","import numpy as np\n","import pandas as pd\n","import umap.umap_ as umap\n","import trimap\n","from sklearn.decomposition import PCA, KernelPCA\n","from sklearn.manifold import TSNE, Isomap, MDS\n","\n","\n","from bokeh.io import show, output_notebook, curdoc\n","from bokeh.plotting import figure\n","from bokeh.plotting import figure, output_file, show, ColumnDataSource\n","from bokeh.models import HoverTool\n","from bokeh.io import output_notebook\n","from bokeh.models.glyphs import Text\n","from bokeh.layouts import row\n","from bokeh.io import export_png\n","output_notebook()\n","\n","## Importing local Python files\n","\n","sys.path.append(r'../') \n","from src import Preprocessing, Distances, Explanation, DR_algorithms, genericMethods\n","from src.LAPS_tabular import LapsExplainer\n","from src.GAPS_tabular import GapsExplainer\n","from src.GAPS_Explanation import get_local_explanations_for_GAPS, compute_local_divergences\n","\n","def is_notebook():\n","  try:\n","    shell = get_ipython().__class__.__name__\n","    if shell == 'ZMQInteractiveShell':\n","      return True   # Jupyter notebook or qtconsole\n","    elif shell == 'TerminalInteractiveShell':\n","      return False  # Terminal running IPython\n","    else:\n","      return False  # Other type (?)\n","  except NameError:\n","    return False\n","if is_notebook():\n","    from tqdm.notebook import tqdm\n","else:\n","    from tqdm import tqdm\n","\n","Data_path = r'/content/drive/MyDrive/STU_Rafae_Baez_Ramirez/New_SNE_Code/LAPS_and_GAPS-master/data/'"]},{"cell_type":"code","execution_count":30,"metadata":{"executionInfo":{"elapsed":6,"status":"ok","timestamp":1659286123400,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"},"user_tz":360},"id":"eV62nK1pUgme"},"outputs":[],"source":["def LAPS_and_plot(embedding, data_transformed, data_df, y_res, model_feats, targ, cat_feats, cat_names, num_feats, points, neighbors = 20, show_fig = False, verbose = False):\n","  exp = LapsExplainer(data_df.values, feature_names=model_feats, class_names=targ, \n","                      categorical_features=cat_feats, categorical_names=cat_names, \n","                      discretize_continuous=False, discretizer='quartile', random_state=42)\n","  laps_scores_all = []\n","  comp_scores_all = []\n","  bar = tqdm(range(len(points)))\n","\n","  for i in bar:\n","    point = points[i]\n","    start = time.time()\n","    neigh, neigh_emb, over_data, over_data_emb = exp.generate_perturbed_neighborhood(data_df.values, data_transformed, embedding, \n","                                                                                    point, data_df.values[point], nbrs=neighbors, \n","                                                                                    num_features=5, verbose = verbose)\n","    corr_feat_dist, _, _, _, _ = Explanation.explain_point_local(data_df.values[point], neigh, over_data, \n","                                                                model_feats, cat_feats, num_feats)\n","    corr_feat_dist_embd, _, _, _, _ = Explanation.explain_point_local(data_df.values[point], neigh_emb, over_data_emb, \n","                                                                      model_feats, cat_feats, num_feats)\n","    components, divergence = Explanation.compute_local_divergence(corr_feat_dist, corr_feat_dist_embd, \n","                                                                  neigh, neigh_emb)\n","    components = components.split(\",\")\n","    laps_scores_all.append(divergence)\n","    comp_scores_all.append(components)\n","  if show_fig:\n","    idx = [i for i in range(len(y_res))]\n","    colormap = {99: 'Red',\n","                -1: 'white', \n","                0: 'gold', \n","                1: 'peachpuff', \n","                2: 'indigo',\n","                3: 'green',\n","                4: 'darkolivegreen',\n","                5: 'cyan',\n","                6: 'blue',\n","                7: 'lightsteelblue',\n","                8: 'magenta',\n","                9: 'grey',\n","                98: 'limegreen'}\n","    colors = [colormap[z] for z in y_res.ravel()]\n","    labels = {99: 'POI',\n","                -1: 'Class -1', \n","                0: 'Class 0', \n","                1: 'Class 1', \n","                2: 'Class 2',\n","                3: 'Class 3',\n","                4: 'Class 4',\n","                5: 'Class 5',\n","                6: 'Class 6',\n","                7: 'Class 7',\n","                8: 'Class 8',\n","                9: 'Class 9',\n","                98: 'neighborsPOI'} \n","    annotations = [labels[z] for z in y_res.ravel()]\n","    source = ColumnDataSource(\n","          data=dict(\n","              x=embedding[:,0],\n","              y=embedding[:,1],\n","              all_colors = colors,\n","              label = annotations,\n","              indexes = idx\n","          )\n","      )\n","    hover = HoverTool(\n","          tooltips=[\n","              (\"index\", \"$index\"),\n","              (\"(x,y)\", \"($x, $y)\"),\n","          ]\n","      )\n","    curdoc().theme = 'dark_minimal'\n","    p = figure(plot_width=700, plot_height=450, tools=[hover],\n","            title=\"Embedding\")\n","    glyph = Text(x=\"x\", y=\"y\", x_offset=7, y_offset=7, text_font_size=\"9pt\", text_color=\"grey\") # text='indexes'\n","    p.circle('x', 'y', fill_color='all_colors', line_color='white', legend='label', size=10, source=source)\n","    p.add_glyph(source, glyph)\n","    print('Showing Plot')\n","    show(p)\n","  return comp_scores_all, laps_scores_all"]},{"cell_type":"code","execution_count":31,"metadata":{"executionInfo":{"elapsed":6,"status":"ok","timestamp":1659286123401,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"},"user_tz":360},"id":"m2PkjdATUhHr"},"outputs":[],"source":["def GAPS_score(embedding, data_transformed, data_df,  model_feats, target, cat_feats, cat_names, num_feats, POI = None, neighbors = 30, num_samples = 50, show_fig = False, verbose = False):\n","  if POI is None:\n","    rep_subset = genericMethods.generate_representative_subset(18, data_df)\n","    data_instance_numbers = rep_subset[0]\n","  else:\n","    data_instance_numbers = POI\n","\n","\n","  explainer = GapsExplainer(data_df.values, feature_names=model_feats,\n","                            class_names=target, categorical_features=cat_feats,\n","                            discretize_continuous=False, discretizer='quartile',\n","                            random_state=42)\n","\n","  neigh, neigh_emb, over_data, over_data_emb, local_feat_cont, local_feat_cont_emb, neigh_local, neigh_emb_local = explainer.generate_perturbed_neighborhood_global(\n","      data_df.values, data_transformed, embedding, data_instance_numbers, model_feats, cat_feats, num_feats, nbrs = neighbors, num_features = 5, num_samples=num_samples, verbose = verbose)\n","\n","  local_divergences = compute_local_divergences(neigh_local, neigh_emb_local, local_feat_cont, local_feat_cont_emb)\n","\n","  corr_feat_dist, _, _ = Explanation.explain_point_global(over_data, model_feats, cat_feats, num_feats, verbose=verbose)\n","  corr_feat_dist_embd, _, _ = Explanation.explain_point_global(over_data_emb, model_feats, cat_feats, num_feats, verbose=verbose)\n","\n","  components, overall_divergence = Explanation.compute_global_divergence(corr_feat_dist, corr_feat_dist_embd, neigh, neigh_emb, local_divergences)\n","  components = components.split(',')\n","  return components, overall_divergence\n"]},{"cell_type":"code","execution_count":32,"metadata":{"executionInfo":{"elapsed":231,"status":"ok","timestamp":1659286123627,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"},"user_tz":360},"id":"R7WNPzKzUlG4"},"outputs":[],"source":["from fSNE_torch import fSNE_torch"]},{"cell_type":"code","execution_count":36,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1659286171239,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"},"user_tz":360},"id":"JNw_LZv9U1Os"},"outputs":[],"source":["datasets = ['Credit_card.csv','spam', 'sentiment']\n","dr_algo_name = ['fSNE','SNE']\n","perplexities = [10,20,30,40,50]\n","iterations = 1000\n","amountPOI = 100"]},{"cell_type":"code","execution_count":37,"metadata":{"executionInfo":{"elapsed":269,"status":"ok","timestamp":1659286171721,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"},"user_tz":360},"id":"rWpZKTJpU31p"},"outputs":[],"source":["from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import accuracy_score\n","datas_perp = np.load(Data_path+'spec_datasets_perp.npy', allow_pickle=True).item()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"LFAdtY-OVEmR"},"outputs":[{"name":"stdout","output_type":"stream","text":["Found previous data for laps, knn, embs, and POI : loading data...\n","Starting on run0_Credit_card.csv_fSNE_10\n"]},{"name":"stderr","output_type":"stream","text":["using cuda\n","Cost: 34019.75484:  21%|██▏       | 214/1000 [02:52\u003c10:33,  1.24it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [01:44\u003c00:00,  1.04s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.84\n","LAPS score = 0.78056\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 31509.53755: 100%|██████████| 1000/1000 [13:15\u003c00:00,  1.26it/s]\n","100%|██████████| 100/100 [01:46\u003c00:00,  1.06s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.85\n","LAPS score = 0.78114\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 31398.59965: 100%|██████████| 1000/1000 [13:14\u003c00:00,  1.26it/s]\n","100%|██████████| 100/100 [01:42\u003c00:00,  1.03s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.85\n","LAPS score = 0.77867\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 31591.39193: 100%|██████████| 1000/1000 [13:07\u003c00:00,  1.27it/s]\n","100%|██████████| 100/100 [01:42\u003c00:00,  1.02s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.86\n","LAPS score = 0.77832\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 31433.02361:  87%|████████▋ | 867/1000 [11:22\u003c01:44,  1.27it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [01:42\u003c00:00,  1.03s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.83\n","LAPS score = 0.77982\n","Starting on run0_Credit_card.csv_SNE_10\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 31401.57802: 100%|██████████| 1000/1000 [12:22\u003c00:00,  1.35it/s]\n","100%|██████████| 100/100 [01:43\u003c00:00,  1.04s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.87\n","LAPS score = 0.78955\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 31210.76392: 100%|██████████| 1000/1000 [12:27\u003c00:00,  1.34it/s]\n","100%|██████████| 100/100 [01:47\u003c00:00,  1.08s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.88\n","LAPS score = 0.78896\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 30792.99558: 100%|██████████| 1000/1000 [12:17\u003c00:00,  1.36it/s]\n","100%|██████████| 100/100 [01:45\u003c00:00,  1.05s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.84\n","LAPS score = 0.78755\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 31545.77181: 100%|██████████| 1000/1000 [12:13\u003c00:00,  1.36it/s]\n","100%|██████████| 100/100 [01:44\u003c00:00,  1.04s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.86\n","LAPS score = 0.79202\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 30687.42364: 100%|██████████| 1000/1000 [12:13\u003c00:00,  1.36it/s]\n","100%|██████████| 100/100 [01:40\u003c00:00,  1.00s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.91\n","LAPS score = 0.79382\n","Starting on run0_Credit_card.csv_fSNE_20\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 28192.74881:  58%|█████▊    | 578/1000 [07:35\u003c05:32,  1.27it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [01:45\u003c00:00,  1.06s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.84\n","LAPS score = 0.80540\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 28728.66696: 100%|██████████| 1000/1000 [13:03\u003c00:00,  1.28it/s]\n","100%|██████████| 100/100 [01:46\u003c00:00,  1.07s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.85\n","LAPS score = 0.80860\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 30365.18293:  13%|█▎        | 128/1000 [01:41\u003c11:29,  1.27it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [01:44\u003c00:00,  1.04s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.87\n","LAPS score = 0.81302\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 28246.90359:  84%|████████▎ | 835/1000 [10:50\u003c02:08,  1.28it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [01:42\u003c00:00,  1.02s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.84\n","LAPS score = 0.80607\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 28331.93389: 100%|██████████| 1000/1000 [13:03\u003c00:00,  1.28it/s]\n","100%|██████████| 100/100 [01:47\u003c00:00,  1.07s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.84\n","LAPS score = 0.80677\n","Starting on run0_Credit_card.csv_SNE_20\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 27538.98251:  59%|█████▉    | 589/1000 [07:13\u003c05:02,  1.36it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [01:45\u003c00:00,  1.05s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.86\n","LAPS score = 0.80966\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 28064.62025: 100%|██████████| 1000/1000 [12:15\u003c00:00,  1.36it/s]\n","100%|██████████| 100/100 [01:44\u003c00:00,  1.05s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.85\n","LAPS score = 0.81853\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 27573.48668:  90%|█████████ | 903/1000 [11:04\u003c01:11,  1.36it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [01:43\u003c00:00,  1.03s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.84\n","LAPS score = 0.80931\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 28077.66402: 100%|██████████| 1000/1000 [12:14\u003c00:00,  1.36it/s]\n","100%|██████████| 100/100 [01:41\u003c00:00,  1.02s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.84\n","LAPS score = 0.81440\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 27729.80837: 100%|██████████| 1000/1000 [12:13\u003c00:00,  1.36it/s]\n","100%|██████████| 100/100 [01:46\u003c00:00,  1.06s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.83\n","LAPS score = 0.81200\n","Starting on run0_Credit_card.csv_fSNE_30\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 26819.96363: 100%|██████████| 1000/1000 [13:03\u003c00:00,  1.28it/s]\n","100%|██████████| 100/100 [01:43\u003c00:00,  1.04s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.87\n","LAPS score = 0.81220\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 26445.31021: 100%|██████████| 1000/1000 [13:04\u003c00:00,  1.27it/s]\n","100%|██████████| 100/100 [01:40\u003c00:00,  1.01s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.84\n","LAPS score = 0.81816\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 27066.19425: 100%|██████████| 1000/1000 [13:00\u003c00:00,  1.28it/s]\n","100%|██████████| 100/100 [01:42\u003c00:00,  1.02s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.85\n","LAPS score = 0.81164\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 26945.25234:  94%|█████████▍| 940/1000 [12:14\u003c00:46,  1.28it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [01:41\u003c00:00,  1.01s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.84\n","LAPS score = 0.81443\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 26325.21966: 100%|██████████| 1000/1000 [13:04\u003c00:00,  1.27it/s]\n","100%|██████████| 100/100 [01:40\u003c00:00,  1.00s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.84\n","LAPS score = 0.81578\n","Starting on run0_Credit_card.csv_SNE_30\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 25792.44371:  97%|█████████▋| 967/1000 [11:49\u003c00:24,  1.36it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [01:43\u003c00:00,  1.04s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.86\n","LAPS score = 0.81557\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 25977.73471: 100%|██████████| 1000/1000 [12:17\u003c00:00,  1.36it/s]\n","100%|██████████| 100/100 [01:42\u003c00:00,  1.03s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.85\n","LAPS score = 0.81118\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 26228.64269: 100%|██████████| 1000/1000 [12:14\u003c00:00,  1.36it/s]\n","100%|██████████| 100/100 [01:44\u003c00:00,  1.05s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.85\n","LAPS score = 0.81157\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 26034.90418: 100%|██████████| 1000/1000 [12:13\u003c00:00,  1.36it/s]\n","100%|██████████| 100/100 [01:42\u003c00:00,  1.03s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.82\n","LAPS score = 0.81590\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 25536.97572: 100%|██████████| 1000/1000 [12:11\u003c00:00,  1.37it/s]\n","100%|██████████| 100/100 [01:43\u003c00:00,  1.03s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.85\n","LAPS score = 0.80893\n","Starting on run0_Credit_card.csv_fSNE_40\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 24796.26917: 100%|██████████| 1000/1000 [12:52\u003c00:00,  1.29it/s]\n","100%|██████████| 100/100 [01:48\u003c00:00,  1.08s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.88\n","LAPS score = 0.80777\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 25053.55033: 100%|██████████| 1000/1000 [13:02\u003c00:00,  1.28it/s]\n","100%|██████████| 100/100 [01:46\u003c00:00,  1.06s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.87\n","LAPS score = 0.80676\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 24947.61417: 100%|██████████| 1000/1000 [13:01\u003c00:00,  1.28it/s]\n","100%|██████████| 100/100 [01:40\u003c00:00,  1.01s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.87\n","LAPS score = 0.80783\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 25103.34194:  53%|█████▎    | 529/1000 [06:52\u003c06:07,  1.28it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [01:38\u003c00:00,  1.01it/s]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.85\n","LAPS score = 0.81394\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 25055.76111:  91%|█████████ | 908/1000 [11:49\u003c01:11,  1.28it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [01:44\u003c00:00,  1.04s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.86\n","LAPS score = 0.81481\n","Starting on run0_Credit_card.csv_SNE_40\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 25072.60190:  72%|███████▏  | 724/1000 [08:55\u003c03:24,  1.35it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [01:44\u003c00:00,  1.04s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.88\n","LAPS score = 0.80949\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 24508.29866:  46%|████▌     | 457/1000 [05:38\u003c06:42,  1.35it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [01:44\u003c00:00,  1.04s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.87\n","LAPS score = 0.80932\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 24253.05289: 100%|██████████| 1000/1000 [12:11\u003c00:00,  1.37it/s]\n","100%|██████████| 100/100 [01:41\u003c00:00,  1.02s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.85\n","LAPS score = 0.80989\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 24209.74754:  81%|████████  | 808/1000 [09:49\u003c02:20,  1.37it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [01:42\u003c00:00,  1.03s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.87\n","LAPS score = 0.81110\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 24219.40080:  43%|████▎     | 428/1000 [05:14\u003c06:59,  1.36it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [01:41\u003c00:00,  1.01s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.88\n","LAPS score = 0.80872\n","Starting on run0_Credit_card.csv_fSNE_50\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 23697.66236: 100%|██████████| 1000/1000 [12:54\u003c00:00,  1.29it/s]\n","100%|██████████| 100/100 [01:50\u003c00:00,  1.11s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.91\n","LAPS score = 0.80818\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 23905.84637: 100%|██████████| 1000/1000 [12:56\u003c00:00,  1.29it/s]\n","100%|██████████| 100/100 [01:48\u003c00:00,  1.09s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.87\n","LAPS score = 0.81142\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 24283.53604:  53%|█████▎    | 526/1000 [06:47\u003c06:07,  1.29it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [01:45\u003c00:00,  1.05s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.92\n","LAPS score = 0.80805\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 23842.46205:  41%|████▏     | 414/1000 [05:21\u003c07:34,  1.29it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [01:53\u003c00:00,  1.13s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.88\n","LAPS score = 0.81063\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 24842.30931:  23%|██▎       | 232/1000 [03:04\u003c10:12,  1.25it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [01:53\u003c00:00,  1.13s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.88\n","LAPS score = 0.81099\n","Starting on run0_Credit_card.csv_SNE_50\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 23467.96479: 100%|██████████| 1000/1000 [12:22\u003c00:00,  1.35it/s]\n","100%|██████████| 100/100 [01:54\u003c00:00,  1.15s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.89\n","LAPS score = 0.81244\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 23684.89115:  41%|████▏     | 413/1000 [05:09\u003c07:19,  1.34it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [01:52\u003c00:00,  1.12s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.89\n","LAPS score = 0.80706\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 23382.41885: 100%|██████████| 1000/1000 [12:26\u003c00:00,  1.34it/s]\n","100%|██████████| 100/100 [01:53\u003c00:00,  1.13s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.89\n","LAPS score = 0.81125\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 23248.12137: 100%|██████████| 1000/1000 [12:24\u003c00:00,  1.34it/s]\n","100%|██████████| 100/100 [01:53\u003c00:00,  1.13s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.9\n","LAPS score = 0.80572\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 23662.10083:  57%|█████▋    | 573/1000 [07:06\u003c05:18,  1.34it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [01:55\u003c00:00,  1.15s/it]\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.92\n","LAPS score = 0.80441\n","Starting on run0_spam_fSNE_10\n"]},{"name":"stderr","output_type":"stream","text":["using cuda\n","Cost: 10656.58954:  51%|█████     | 509/1000 [03:08\u003c03:02,  2.70it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [07:01\u003c00:00,  4.21s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.81\n","LAPS score = 0.68969\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 8693.80491:  47%|████▋     | 469/1000 [02:53\u003c03:16,  2.70it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [07:01\u003c00:00,  4.22s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.79\n","LAPS score = 0.67302\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 9763.74252: 100%|██████████| 1000/1000 [06:07\u003c00:00,  2.72it/s]\n","100%|██████████| 100/100 [06:59\u003c00:00,  4.19s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.79\n","LAPS score = 0.69413\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 9336.74979:  61%|██████▏   | 613/1000 [03:47\u003c02:23,  2.70it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [07:05\u003c00:00,  4.26s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.78\n","LAPS score = 0.68452\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 10204.10442:  83%|████████▎ | 828/1000 [05:12\u003c01:04,  2.65it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","No progress in the last 10 iterations\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 100/100 [07:01\u003c00:00,  4.22s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.81\n","LAPS score = 0.69395\n","Starting on run0_spam_SNE_10\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 9784.33311: 100%|██████████| 1000/1000 [06:05\u003c00:00,  2.73it/s]\n","100%|██████████| 100/100 [07:00\u003c00:00,  4.20s/it]\n","using cuda\n"]},{"name":"stdout","output_type":"stream","text":["KNN classifier score = 0.82\n","LAPS score = 0.72143\n"]},{"name":"stderr","output_type":"stream","text":["Cost: 11674.41789:  25%|██▍       | 247/1000 [01:30\u003c04:43,  2.66it/s]"]}],"source":["try:\n","  laps_scores = np.load(Data_path+'old_data/'+'laps_scores.npy', allow_pickle=True)\n","  knn_score = np.load(Data_path+'old_data/'+'knn_scores.npy', allow_pickle=True)\n","  embeddings = np.load(Data_path+'old_data/'+'embs.npy', allow_pickle=True)\n","  POI_all = np.load(Data_path+'old_data/'+'POI_all.npy', allow_pickle=True)\n","  laps_scores = dict(laps_scores.item())\n","  knn_scores = dict(knn_score.item())\n","  embeddings = dict(embeddings.item())\n","  POI_all = dict(POI_all.item())\n","  print('Found previous data for laps, knn, embs, and POI : loading data...')\n","except:\n","  laps_scores = {}\n","  knn_scores = {}\n","  embeddings = {}\n","  POI_all = {}\n","try:\n","  gaps_scores = np.load(Data_path+'gaps_scores.npy', allow_pickle=True)\n","  gaps_scores = dict(gaps_scores.item())\n","  print('Found previous data for gaps : loading data...')\n","except:\n","  gaps_scores = {}\n","\n","runs = 3\n","for run in range(runs):\n","  for dataset in datasets:\n","    dataset_file = f'{Data_path}samples/datasets_{1}.npy'\n","    data = dict(np.load(dataset_file,allow_pickle=True).item())\n","    (X_transformed, params) = datas_perp[dataset]\n","    if dataset in POI_all.keys():\n","      print(f'Using previous POI')\n","      newPOI = POI_all[f'run{run}_{dataset}']\n","    else:\n","      newPOI = np.sort(np.random.randint(0, X_transformed.shape[0], amountPOI))\n","      POI_all[f'run{run}_{dataset}'] = newPOI\n","    np.save(Data_path+'POI_all', POI_all, allow_pickle=True)\n","\n","    for p in perplexities:\n","      orig_neigh = KNeighborsClassifier(n_neighbors=p)\n","      orig_neigh.fit(X_transformed, params[1])\n","      orig_pred = orig_neigh.predict(X_transformed[params[5]])\n","      dr_algo = [fSNE_torch(X_transformed, max_iter=iterations, perp=p, POI=newPOI, ES = 10, lambdas = 2),\n","                fSNE_torch(X_transformed, max_iter=iterations, perp=p, POI=[], ES = 10, lambdas = 1)]      \n","      for i, algo in enumerate(dr_algo):\n","        key = f'run{run}_{dataset}_{dr_algo_name[i]}_{p}'\n","        if key in laps_scores.keys():\n","          if type(laps_scores[key]) is str:\n","            laps_scores[key] = [float(laps_scores[key])]\n","          if type(laps_scores[key]) is float or len(laps_scores[key]) \u003c 5:\n","            laps_ls = list(np.array(laps_scores[key]).reshape(-1))\n","            knn_ls = list(np.array(knn_scores[key]).reshape(-1))\n","            print(f'Adding on {key}')\n","            while len(laps_ls) \u003c 5:\n","              embedding = algo.fit_transform()\n","              while np.isnan(embedding).any():\n","                embedding = algo.fit_transform()\n","              embeddings[key] = embedding\n","\n","              _, laps_div = LAPS_and_plot(embedding, X_transformed,\n","                            params[0], params[1],\n","                            params[2], params[3],\n","                            [], [],\n","                            params[4], newPOI,\n","                            neighbors = p, show_fig = False, verbose = False)\n","              neigh = KNeighborsClassifier(n_neighbors=p)\n","              neigh.fit(embedding, params[1])\n","              new_pred = neigh.predict(embedding[newPOI])\n","\n","              laps = f'{np.mean(laps_div):.5f}'\n","              knn = f'{accuracy_score(orig_pred, new_pred)}'\n","              \n","              print(f'KNN classifier score = {knn}')\n","              print(f'LAPS score = {laps}')\n","\n","              laps_ls.append(laps)\n","              knn_ls.append(knn)\n","              laps_scores[key] = laps_ls\n","              knn_scores[key] = knn_ls\n","\n","              np.save(Data_path+'laps_scores', laps_scores, allow_pickle=True)\n","              np.save(Data_path+'knn_scores', knn_scores, allow_pickle=True)\n","              np.save(Data_path+'embs', embeddings, allow_pickle=True)\n","          else:\n","            print(f'Skipping {key}')\n","        else:\n","          print(f'Starting on {key}')\n","          laps_ls = []\n","          knn_ls = []\n","          while len(laps_ls) \u003c 5:\n","            embedding = algo.fit_transform()\n","            while np.isnan(embedding).any():\n","              embedding = algo.fit_transform()\n","            embeddings[key] = embedding\n","\n","            _, laps_div = LAPS_and_plot(embedding, X_transformed,\n","                          params[0], params[1],\n","                          params[2], params[3],\n","                          [], [],\n","                          params[4], newPOI,\n","                          neighbors = p, show_fig = False, verbose = False)\n","            neigh = KNeighborsClassifier(n_neighbors=p)\n","            neigh.fit(embedding, params[1])\n","            new_pred = neigh.predict(embedding[newPOI])\n","\n","            laps = f'{np.mean(laps_div):.5f}'\n","            knn = f'{accuracy_score(orig_pred, new_pred)}'\n","            \n","            print(f'KNN classifier score = {knn}')\n","            print(f'LAPS score = {laps}')\n","\n","            laps_ls.append(laps)\n","            knn_ls.append(knn)\n","            laps_scores[key] = laps_ls\n","            knn_scores[key] = knn_ls\n","\n","            np.save(Data_path+'laps_scores', laps_scores, allow_pickle=True)\n","            np.save(Data_path+'knn_scores', knn_scores, allow_pickle=True)\n","            np.save(Data_path+'embs', embeddings, allow_pickle=True)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1660614,"status":"ok","timestamp":1659212450942,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"},"user_tz":360},"id":"Dfxq1k0tFVDS","outputId":"768ce9d1-0d12-45b7-b2ee-a14fb4e8c7a9"},"outputs":[{"name":"stdout","output_type":"stream","text":["Working on breast_cancer_fSNE_10\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_10\n","GAPS score = 0.02302\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_10\n","GAPS score = 0.02374\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_10\n","GAPS score = 0.02302\n","Working on breast_cancer_SNE_10\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_10\n","GAPS score = 0.02282\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_10\n","GAPS score = 0.02231\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_10\n","GAPS score = 0.02282\n","Working on breast_cancer_fSNE_20\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_20\n","GAPS score = 0.02196\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_20\n","GAPS score = 0.02228\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_20\n","GAPS score = 0.02266\n","Working on breast_cancer_SNE_20\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_20\n","GAPS score = 0.02143\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_20\n","GAPS score = 0.02134\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_20\n","GAPS score = 0.02134\n","Working on breast_cancer_fSNE_30\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_30\n","GAPS score = 0.02174\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_30\n","GAPS score = 0.02131\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_30\n","GAPS score = 0.02130\n","Working on breast_cancer_SNE_30\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_30\n","GAPS score = 0.02092\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_30\n","GAPS score = 0.02090\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_30\n","GAPS score = 0.02092\n","Working on breast_cancer_fSNE_40\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_40\n","GAPS score = 0.02111\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_40\n","GAPS score = 0.02146\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_40\n","GAPS score = 0.02114\n","Working on breast_cancer_SNE_40\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_40\n","GAPS score = 0.02042\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_40\n","GAPS score = 0.02042\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_40\n","GAPS score = 0.02042\n","Working on breast_cancer_fSNE_50\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_50\n","GAPS score = 0.02106\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_50\n","GAPS score = 0.02121\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_50\n","GAPS score = 0.02111\n","Working on breast_cancer_SNE_50\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_50\n","GAPS score = 0.02073\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_50\n","GAPS score = 0.02073\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_50\n","GAPS score = 0.02076\n"]}],"source":["\n","# embeddings = {}\n","# laps_scores = {}\n","# knn_scores = {}\n","#gaps_scores = {}\n","gaps_scores = dict(np.load(Data_path+'gaps_scores.npy', allow_pickle=True).item())\n","datasets = ['breast_cancer.csv']\n","runs = 5\n","\n","for k in range(len(datasets)):\n","  (X_transformed, params) = datas_perp[datasets[k]]\n","  for p in perplexities:\n","    for i in range(2):\n","      key = f'{datasets[k][:-4]}_{dr_algo_name[i]}_{p}'\n","      print(f'Working on {key}')\n","      gaps_ls = []\n","      for j in range(3):\n","        embedding = embeddings[key][j]\n","\n","        _, gaps_div = GAPS_score(embedding, X_transformed, \n","                              params[0], params[2],\n","                              params[3], [],\n","                              [], params[4],\n","                              params[5], neighbors = 5, num_samples = 2, show_fig=False, verbose = False)\n","        gaps = f'{np.mean(gaps_div):.5f}'\n","        print(f'{key}')\n","        print(f'GAPS score = {gaps}')\n","        gaps_ls.append(gaps)\n","\n","\n","      gaps_scores[key] = gaps_ls\n","      np.save(Data_path+'gaps_scores', gaps_scores, allow_pickle=True)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9jn7WRYZqiAm"},"outputs":[],"source":["np.save(Data_path+'gaps_scores1', gaps_scores, allow_pickle=True)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"J_Z9pzGDxovt"},"outputs":[],"source":[""]}],"metadata":{"accelerator":"GPU","colab":{"authorship_tag":"ABX9TyMgSe+9+hQJjAJpe8+xNRal","collapsed_sections":[],"machine_shape":"hm","name":"reLAPS_test","provenance":[{"file_id":"13U4ybC4efMqChBcUEXuKGv6chcYpzXaY","timestamp":1659245983711},{"file_id":"1E--GMi7RvZPFNdQJdLkvd2iUNhAj4eXA","timestamp":1659243571422}],"version":""},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}