{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":99956,"status":"ok","timestamp":1659209144417,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"},"user_tz":360},"id":"akl5ZFdnSU-K","outputId":"dfd6709b-09d1-40ca-b7b6-77d10cbb263a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting umap-learn\n","  Downloading umap-learn-0.5.3.tar.gz (88 kB)\n","\u001b[K     |████████████████████████████████| 88 kB 3.5 MB/s \n","\u001b[?25hRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from umap-learn) (1.21.6)\n","Requirement already satisfied: scikit-learn>=0.22 in /usr/local/lib/python3.7/dist-packages (from umap-learn) (1.0.2)\n","Requirement already satisfied: scipy>=1.0 in /usr/local/lib/python3.7/dist-packages (from umap-learn) (1.7.3)\n","Requirement already satisfied: numba>=0.49 in /usr/local/lib/python3.7/dist-packages (from umap-learn) (0.51.2)\n","Collecting pynndescent>=0.5\n","  Downloading pynndescent-0.5.7.tar.gz (1.1 MB)\n","\u001b[K     |████████████████████████████████| 1.1 MB 13.5 MB/s \n","\u001b[?25hRequirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from umap-learn) (4.64.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from numba>=0.49->umap-learn) (57.4.0)\n","Requirement already satisfied: llvmlite<0.35,>=0.34.0.dev0 in /usr/local/lib/python3.7/dist-packages (from numba>=0.49->umap-learn) (0.34.0)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from pynndescent>=0.5->umap-learn) (1.1.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.22->umap-learn) (3.1.0)\n","Building wheels for collected packages: umap-learn, pynndescent\n","  Building wheel for umap-learn (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for umap-learn: filename=umap_learn-0.5.3-py3-none-any.whl size=82829 sha256=aabd02e31e290b982aabcbe8927f9da98fd66c0ce0af626af8231843e44a0190\n","  Stored in directory: /root/.cache/pip/wheels/b3/52/a5/1fd9e3e76a7ab34f134c07469cd6f16e27ef3a37aeff1fe821\n","  Building wheel for pynndescent (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pynndescent: filename=pynndescent-0.5.7-py3-none-any.whl size=54286 sha256=39aea20fd79b354338bbb263b72687409cf68b722393f19fc7c817b9efed1cbd\n","  Stored in directory: /root/.cache/pip/wheels/7f/2a/f8/7bd5dcec71bd5c669f6f574db3113513696b98f3f9b51f496c\n","Successfully built umap-learn pynndescent\n","Installing collected packages: pynndescent, umap-learn\n","Successfully installed pynndescent-0.5.7 umap-learn-0.5.3\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting trimap\n","  Downloading trimap-1.1.4-py3-none-any.whl (15 kB)\n","Requirement already satisfied: scikit-learn>=0.16 in /usr/local/lib/python3.7/dist-packages (from trimap) (1.0.2)\n","Requirement already satisfied: numba>=0.34 in /usr/local/lib/python3.7/dist-packages (from trimap) (0.51.2)\n","Collecting annoy>=1.11\n","  Downloading annoy-1.17.0.tar.gz (646 kB)\n","\u001b[K     |████████████████████████████████| 646 kB 15.4 MB/s \n","\u001b[?25hRequirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from numba>=0.34->trimap) (57.4.0)\n","Requirement already satisfied: numpy>=1.15 in /usr/local/lib/python3.7/dist-packages (from numba>=0.34->trimap) (1.21.6)\n","Requirement already satisfied: llvmlite<0.35,>=0.34.0.dev0 in /usr/local/lib/python3.7/dist-packages (from numba>=0.34->trimap) (0.34.0)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.16->trimap) (1.1.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.16->trimap) (3.1.0)\n","Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.16->trimap) (1.7.3)\n","Building wheels for collected packages: annoy\n","  Building wheel for annoy (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for annoy: filename=annoy-1.17.0-cp37-cp37m-linux_x86_64.whl size=391572 sha256=7ebc589647dcea74ebee9f0a60bd71e316492718910448887f77343b43b46c21\n","  Stored in directory: /root/.cache/pip/wheels/4f/e8/1e/7cc9ebbfa87a3b9f8ba79408d4d31831d67eea918b679a4c07\n","Successfully built annoy\n","Installing collected packages: annoy, trimap\n","Successfully installed annoy-1.17.0 trimap-1.1.4\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: nltk in /usr/local/lib/python3.7/dist-packages (3.7)\n","Requirement already satisfied: click in /usr/local/lib/python3.7/dist-packages (from nltk) (7.1.2)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from nltk) (4.64.0)\n","Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.7/dist-packages (from nltk) (2022.6.2)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from nltk) (1.1.0)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: gensim in /usr/local/lib/python3.7/dist-packages (3.6.0)\n","Requirement already satisfied: scipy>=0.18.1 in /usr/local/lib/python3.7/dist-packages (from gensim) (1.7.3)\n","Requirement already satisfied: smart-open>=1.2.1 in /usr/local/lib/python3.7/dist-packages (from gensim) (5.2.1)\n","Requirement already satisfied: six>=1.5.0 in /usr/local/lib/python3.7/dist-packages (from gensim) (1.15.0)\n","Requirement already satisfied: numpy>=1.11.3 in /usr/local/lib/python3.7/dist-packages (from gensim) (1.21.6)\n","Mounted at /content/drive\n"]}],"source":["#!pip uninstall umap\n","!pip install umap-learn\n","!pip install trimap\n","!pip install nltk\n","!pip install gensim\n","\n","%load_ext autoreload\n","%autoreload 2\n","from google.colab import drive\n","drive.mount('/content/drive', force_remount=True)\n","import sys\n","sys.path.insert(1, r'/content/drive/MyDrive/STU_Rafae_Baez_Ramirez/New_SNE_Code/')\n","sys.path.insert(1, r'/content/drive/MyDrive/STU_Rafae_Baez_Ramirez/New_SNE_Code/LAPS_and_GAPS-master/')\n","\n","%matplotlib inline\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","import os\n","import sys\n","import math\n","import time\n","import numpy as np\n","import pandas as pd\n","import umap.umap_ as umap\n","import trimap\n","from sklearn.decomposition import PCA, KernelPCA\n","from sklearn.manifold import TSNE, Isomap, MDS\n","\n","\n","from bokeh.io import show, output_notebook, curdoc\n","from bokeh.plotting import figure\n","from bokeh.plotting import figure, output_file, show, ColumnDataSource\n","from bokeh.models import HoverTool\n","from bokeh.io import output_notebook\n","from bokeh.models.glyphs import Text\n","from bokeh.layouts import row\n","from bokeh.io import export_png\n","output_notebook()\n","\n","## Importing local Python files\n","\n","sys.path.append(r'../') \n","from src import Preprocessing, Distances, Explanation, DR_algorithms, genericMethods\n","from src.LAPS_tabular import LapsExplainer\n","from src.GAPS_tabular import GapsExplainer\n","from src.GAPS_Explanation import get_local_explanations_for_GAPS, compute_local_divergences\n","\n","def is_notebook():\n","  try:\n","    shell = get_ipython().__class__.__name__\n","    if shell == 'ZMQInteractiveShell':\n","      return True   # Jupyter notebook or qtconsole\n","    elif shell == 'TerminalInteractiveShell':\n","      return False  # Terminal running IPython\n","    else:\n","      return False  # Other type (?)\n","  except NameError:\n","    return False\n","if is_notebook():\n","    from tqdm.notebook import tqdm\n","else:\n","    from tqdm import tqdm\n","\n","Data_path = r'/content/drive/MyDrive/STU_Rafae_Baez_Ramirez/New_SNE_Code/LAPS_and_GAPS-master/data/'"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"eV62nK1pUgme","executionInfo":{"status":"ok","timestamp":1659209144418,"user_tz":360,"elapsed":5,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}}},"outputs":[],"source":["def LAPS_and_plot(embedding, data_transformed, data_df, y_res, model_feats, targ, cat_feats, cat_names, num_feats, points, neighbors = 20, show_fig = False, verbose = False):\n","  exp = LapsExplainer(data_df.values, feature_names=model_feats, class_names=targ, \n","                      categorical_features=cat_feats, categorical_names=cat_names, \n","                      discretize_continuous=False, discretizer='quartile', random_state=42)\n","  laps_scores_all = []\n","  comp_scores_all = []\n","  bar = tqdm(range(len(points)))\n","\n","  for i in bar:\n","    point = points[i]\n","    start = time.time()\n","    neigh, neigh_emb, over_data, over_data_emb = exp.generate_perturbed_neighborhood(data_df.values, data_transformed, embedding, \n","                                                                                    point, data_df.values[point], nbrs=neighbors, \n","                                                                                    num_features=5, verbose = verbose)\n","    corr_feat_dist, _, _, _, _ = Explanation.explain_point_local(data_df.values[point], neigh, over_data, \n","                                                                model_feats, cat_feats, num_feats)\n","    corr_feat_dist_embd, _, _, _, _ = Explanation.explain_point_local(data_df.values[point], neigh_emb, over_data_emb, \n","                                                                      model_feats, cat_feats, num_feats)\n","    components, divergence = Explanation.compute_local_divergence(corr_feat_dist, corr_feat_dist_embd, \n","                                                                  neigh, neigh_emb)\n","    components = components.split(\",\")\n","    laps_scores_all.append(divergence)\n","    comp_scores_all.append(components)\n","  if show_fig:\n","    idx = [i for i in range(len(y_res))]\n","    colormap = {99: 'Red',\n","                -1: 'white', \n","                0: 'gold', \n","                1: 'peachpuff', \n","                2: 'indigo',\n","                3: 'green',\n","                4: 'darkolivegreen',\n","                5: 'cyan',\n","                6: 'blue',\n","                7: 'lightsteelblue',\n","                8: 'magenta',\n","                9: 'grey',\n","                98: 'limegreen'}\n","    colors = [colormap[z] for z in y_res.ravel()]\n","    labels = {99: 'POI',\n","                -1: 'Class -1', \n","                0: 'Class 0', \n","                1: 'Class 1', \n","                2: 'Class 2',\n","                3: 'Class 3',\n","                4: 'Class 4',\n","                5: 'Class 5',\n","                6: 'Class 6',\n","                7: 'Class 7',\n","                8: 'Class 8',\n","                9: 'Class 9',\n","                98: 'neighborsPOI'} \n","    annotations = [labels[z] for z in y_res.ravel()]\n","    source = ColumnDataSource(\n","          data=dict(\n","              x=embedding[:,0],\n","              y=embedding[:,1],\n","              all_colors = colors,\n","              label = annotations,\n","              indexes = idx\n","          )\n","      )\n","    hover = HoverTool(\n","          tooltips=[\n","              (\"index\", \"$index\"),\n","              (\"(x,y)\", \"($x, $y)\"),\n","          ]\n","      )\n","    curdoc().theme = 'dark_minimal'\n","    p = figure(plot_width=700, plot_height=450, tools=[hover],\n","            title=\"Embedding\")\n","    glyph = Text(x=\"x\", y=\"y\", x_offset=7, y_offset=7, text_font_size=\"9pt\", text_color=\"grey\") # text='indexes'\n","    p.circle('x', 'y', fill_color='all_colors', line_color='white', legend='label', size=10, source=source)\n","    p.add_glyph(source, glyph)\n","    print('Showing Plot')\n","    show(p)\n","  return comp_scores_all, laps_scores_all"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"m2PkjdATUhHr","executionInfo":{"status":"ok","timestamp":1659209144559,"user_tz":360,"elapsed":145,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}}},"outputs":[],"source":["def GAPS_score(embedding, data_transformed, data_df,  model_feats, target, cat_feats, cat_names, num_feats, POI = None, neighbors = 30, num_samples = 50, show_fig = False, verbose = False):\n","  if POI is None:\n","    rep_subset = genericMethods.generate_representative_subset(18, data_df)\n","    data_instance_numbers = rep_subset[0]\n","  else:\n","    data_instance_numbers = POI\n","\n","\n","  explainer = GapsExplainer(data_df.values, feature_names=model_feats,\n","                            class_names=target, categorical_features=cat_feats,\n","                            discretize_continuous=False, discretizer='quartile',\n","                            random_state=42)\n","\n","  neigh, neigh_emb, over_data, over_data_emb, local_feat_cont, local_feat_cont_emb, neigh_local, neigh_emb_local = explainer.generate_perturbed_neighborhood_global(\n","      data_df.values, data_transformed, embedding, data_instance_numbers, model_feats, cat_feats, num_feats, nbrs = neighbors, num_features = 5, num_samples=num_samples, verbose = verbose)\n","\n","  local_divergences = compute_local_divergences(neigh_local, neigh_emb_local, local_feat_cont, local_feat_cont_emb)\n","\n","  corr_feat_dist, _, _ = Explanation.explain_point_global(over_data, model_feats, cat_feats, num_feats, verbose=verbose)\n","  corr_feat_dist_embd, _, _ = Explanation.explain_point_global(over_data_emb, model_feats, cat_feats, num_feats, verbose=verbose)\n","\n","  components, overall_divergence = Explanation.compute_global_divergence(corr_feat_dist, corr_feat_dist_embd, neigh, neigh_emb, local_divergences)\n","  components = components.split(',')\n","  return components, overall_divergence\n"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"_j9vTpBEUjAx","executionInfo":{"status":"ok","timestamp":1659209144841,"user_tz":360,"elapsed":283,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}}},"outputs":[],"source":["def load_data(data_path = Data_path, dataset_name = 'breast_cancer', amountPOI = 100, seed = 2022, max_samples = 10000):\n","  if dataset_name == 'spam':\n","    df = pd.DataFrame(spam_data)\n","  elif dataset_name == 'sentiment':\n","    df = pd.DataFrame(sentiment_data)\n","  else:\n","    df = pd.read_csv(data_path + dataset_name + '.csv')\n","  df = df.fillna(0)\n","  if df.shape[0] > max_samples:\n","    df = df.sample(max_samples)\n","  df.reset_index(inplace = True, drop = True)\n","  df.head()\n","  \n","  model_features, target = Preprocessing.set_features_and_target(df)\n","\n","  y = (df[target].values.reshape(-1, ))\n","  X_df = pd.DataFrame(df, columns=model_features)\n","\n","  np.random.seed(seed)\n","  POI = np.random.randint(0, X_df.shape[0], amountPOI)\n","\n","  X_transformed, categorical_features, numeric_features, categorical_names = Preprocessing.identify_and_transform_features(df, model_features)\n","\n","  params = [X_df, y, model_features, target, categorical_features, categorical_names, numeric_features, POI]\n","  return X_transformed, params"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"R7WNPzKzUlG4","executionInfo":{"status":"ok","timestamp":1659209148192,"user_tz":360,"elapsed":3353,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}}},"outputs":[],"source":["from fSNE_torch import fSNE_torch"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"JNw_LZv9U1Os","executionInfo":{"status":"ok","timestamp":1659209148355,"user_tz":360,"elapsed":166,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}}},"outputs":[],"source":["#datasets = ['breast_cancer.csv', 'Credit_card.csv', 'Magic.csv', 'Wine_Quality.csv', 'spam', 'sentiment']\n","datasets = ['spam', 'sentiment']\n","dr_algo_name = ['fSNE','SNE']\n","perplexities = [10,20,30,40,50]\n","iterations = 1000\n","amountPOI = 100"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"rWpZKTJpU31p","executionInfo":{"status":"ok","timestamp":1659209149398,"user_tz":360,"elapsed":1045,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}}},"outputs":[],"source":["from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import accuracy_score\n","datas_perp = np.load(Data_path+'spec_datasets_perp.npy', allow_pickle=True).item()"]},{"cell_type":"code","source":["laps_scores = np.load(Data_path+'laps_scores1.npy', allow_pickle=True)\n","knn_score = np.load(Data_path+'knn_scores1.npy', allow_pickle=True)\n","embeddings = np.load(Data_path+'embs1.npy', allow_pickle=True)\n","laps_scores = dict(laps_scores.item())\n","knn_scores = dict(knn_score.item())\n","embeddings = dict(embeddings.item())\n","print(laps_scores.keys())\n","print(knn_scores.keys())\n","print(embeddings.keys())\n","#print(laps_scores['spam_fSNE_10'])\n","#print(knn_scores['spam_fSNE_10'])\n","#print(embeddings['spam_fSNE_10'])"],"metadata":{"id":"WYau58ptFhRn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1659209150145,"user_tz":360,"elapsed":751,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}},"outputId":"1179a5dd-377c-42dd-de1e-d38951bc64b8"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["dict_keys(['breast_cancer_fSNE_10', 'breast_cancer_SNE_10', 'breast_cancer_fSNE_20', 'breast_cancer_SNE_20', 'breast_cancer_fSNE_30', 'breast_cancer_SNE_30', 'breast_cancer_fSNE_40', 'breast_cancer_SNE_40', 'breast_cancer_fSNE_50', 'breast_cancer_SNE_50'])\n","dict_keys(['breast_cancer_fSNE_10', 'breast_cancer_SNE_10', 'breast_cancer_fSNE_20', 'breast_cancer_SNE_20', 'breast_cancer_fSNE_30', 'breast_cancer_SNE_30', 'breast_cancer_fSNE_40', 'breast_cancer_SNE_40', 'breast_cancer_fSNE_50', 'breast_cancer_SNE_50'])\n","dict_keys(['breast_cancer_fSNE_10', 'breast_cancer_SNE_10', 'breast_cancer_fSNE_20', 'breast_cancer_SNE_20', 'breast_cancer_fSNE_30', 'breast_cancer_SNE_30', 'breast_cancer_fSNE_40', 'breast_cancer_SNE_40', 'breast_cancer_fSNE_50', 'breast_cancer_SNE_50'])\n"]}]},{"cell_type":"code","execution_count":14,"metadata":{"id":"_Jxwm99qYtFa","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1659223258146,"user_tz":360,"elapsed":4065743,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}},"outputId":"2cad6fd7-76cd-4be8-8bf5-d9928e3dfa43"},"outputs":[{"output_type":"stream","name":"stdout","text":["Skipping sentiment_fSNE_10\n","Skipping sentiment_SNE_10\n","Skipping sentiment_fSNE_20\n","Skipping sentiment_SNE_20\n","Skipping sentiment_fSNE_30\n","Skipping sentiment_SNE_30\n","Skipping sentiment_fSNE_40\n","Working on sentiment_SNE_40\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 100/100 [07:17<00:00,  4.38s/it]\n"]},{"output_type":"stream","name":"stdout","text":["KNN classifier score = 0.82\n","LAPS score = 0.80346\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 100/100 [07:09<00:00,  4.30s/it]\n"]},{"output_type":"stream","name":"stdout","text":["KNN classifier score = 0.77\n","LAPS score = 0.80296\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 100/100 [07:12<00:00,  4.33s/it]\n"]},{"output_type":"stream","name":"stdout","text":["KNN classifier score = 0.78\n","LAPS score = 0.80292\n","Working on sentiment_fSNE_50\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 100/100 [07:40<00:00,  4.61s/it]\n"]},{"output_type":"stream","name":"stdout","text":["KNN classifier score = 0.77\n","LAPS score = 0.79443\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 100/100 [07:42<00:00,  4.63s/it]\n"]},{"output_type":"stream","name":"stdout","text":["KNN classifier score = 0.81\n","LAPS score = 0.79481\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 100/100 [07:41<00:00,  4.61s/it]\n"]},{"output_type":"stream","name":"stdout","text":["KNN classifier score = 0.64\n","LAPS score = 0.79591\n","Working on sentiment_SNE_50\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 100/100 [07:40<00:00,  4.61s/it]\n"]},{"output_type":"stream","name":"stdout","text":["KNN classifier score = 0.69\n","LAPS score = 0.79756\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 100/100 [07:38<00:00,  4.59s/it]\n"]},{"output_type":"stream","name":"stdout","text":["KNN classifier score = 0.77\n","LAPS score = 0.80071\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 100/100 [07:39<00:00,  4.60s/it]"]},{"output_type":"stream","name":"stdout","text":["KNN classifier score = 0.77\n","LAPS score = 0.80071\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}],"source":["dataset = 'sentiment'\n","dataset_embeddings = dict(np.load(Data_path+'embeddings_'+dataset+'.npy', allow_pickle=True).item())\n","\n","(X_transformed, params) = datas_perp[dataset]\n","for p in perplexities:\n","  orig_neigh = KNeighborsClassifier(n_neighbors=p)\n","  orig_neigh.fit(X_transformed, params[1])\n","  orig_pred = orig_neigh.predict(X_transformed[params[5]])\n","  for i in range(2):\n","    key = f'{dataset}_{dr_algo_name[i]}_{p}'\n","    if key in laps_scores.keys():\n","      print(f'Skipping {key}')\n","    else:\n","      print(f'Working on {key}')\n","      laps_ls = []\n","      knn_ls = []\n","      embs = []\n","      for j in range(3):\n","          embedding = dataset_embeddings[key][j]\n","          embs.append(embedding)\n","\n","          _, laps_div = LAPS_and_plot(embedding, X_transformed,\n","                                      params[0], params[1],\n","                                      params[2], params[3],\n","                                      [], [],\n","                                      params[4], params[5],\n","                                      neighbors = p, show_fig = False, verbose = False)\n","          neigh = KNeighborsClassifier(n_neighbors=p)\n","          neigh.fit(embedding, params[1])\n","          new_pred = neigh.predict(embedding[params[5]])\n","\n","          laps = f'{np.mean(laps_div):.5f}'\n","          knn = f'{accuracy_score(orig_pred, new_pred)}'\n","          \n","          print(f'KNN classifier score = {knn}')\n","          print(f'LAPS score = {laps}')\n","\n","          knn_ls.append(knn)\n","          laps_ls.append(laps)\n","      laps_scores[key] = laps_ls\n","      knn_scores[key] = knn_ls\n","      embeddings[key] = embs\n","      np.save(Data_path+'laps_scores1', laps_scores, allow_pickle=True)\n","      np.save(Data_path+'knn_scores1', knn_scores, allow_pickle=True)\n","      np.save(Data_path+'embs1', embeddings, allow_pickle=True)"]},{"cell_type":"code","source":["np.save(Data_path+'laps_scores_all', laps_scores, allow_pickle=True)"],"metadata":{"id":"nR9Z64ivkkWB","executionInfo":{"status":"ok","timestamp":1659226479203,"user_tz":360,"elapsed":147,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["print(knn_scores.keys())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4kXqGHjMmS4c","executionInfo":{"status":"ok","timestamp":1659226444867,"user_tz":360,"elapsed":133,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}},"outputId":"468f1cdb-0d6b-4fea-e278-743652adcdee"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["dict_keys(['breast_cancer_fSNE_10', 'breast_cancer_SNE_10', 'breast_cancer_fSNE_20', 'breast_cancer_SNE_20', 'breast_cancer_fSNE_30', 'breast_cancer_SNE_30', 'breast_cancer_fSNE_40', 'breast_cancer_SNE_40', 'breast_cancer_fSNE_50', 'breast_cancer_SNE_50', 'sentiment_fSNE_10', 'sentiment_SNE_10', 'sentiment_fSNE_20', 'sentiment_SNE_20', 'sentiment_fSNE_30', 'sentiment_SNE_30', 'sentiment_fSNE_40', 'sentiment_SNE_40', 'sentiment_fSNE_50', 'sentiment_SNE_50'])\n"]}]},{"cell_type":"code","source":["datasets = ['breast_cancer.csv', 'Credit_card.csv', 'Magic.csv', 'Wine_Quality.csv', 'spam', 'sentiment']\n","datas_perp = np.load(Data_path+'spec_datasets_perp.npy', allow_pickle=True).item()\n","for dataset in datasets:\n","  (X_transformed, _) = datas_perp[dataset]\n","  print(X_transformed.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rd_Ti62VmlLZ","executionInfo":{"status":"ok","timestamp":1659237075963,"user_tz":360,"elapsed":361,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}},"outputId":"07b7ccca-025a-4842-92f2-9b1209b0cc43"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["(569, 30)\n","(10000, 23)\n","(10000, 10)\n","(3918, 11)\n","(5572, 100)\n","(10000, 100)\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"wRuRSN2CPHfV"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"collapsed_sections":[],"name":"runLAPS_oneDataset","provenance":[{"file_id":"1y0zREsLRa1hemTh6ujHpkUdxmto23uyL","timestamp":1659189412393},{"file_id":"1E--GMi7RvZPFNdQJdLkvd2iUNhAj4eXA","timestamp":1659152180636}],"authorship_tag":"ABX9TyMYcRJjmG5IdBGqgwA0STWJ"},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}