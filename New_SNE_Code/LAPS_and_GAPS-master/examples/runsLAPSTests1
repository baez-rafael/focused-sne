{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"akl5ZFdnSU-K","outputId":"97f39cbc-5c49-442e-dad5-5c1e572df370","executionInfo":{"status":"ok","timestamp":1659209420497,"user_tz":360,"elapsed":96178,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting umap-learn\n","  Downloading umap-learn-0.5.3.tar.gz (88 kB)\n","\u001b[K     |████████████████████████████████| 88 kB 3.0 MB/s \n","\u001b[?25hRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from umap-learn) (1.21.6)\n","Requirement already satisfied: scikit-learn>=0.22 in /usr/local/lib/python3.7/dist-packages (from umap-learn) (1.0.2)\n","Requirement already satisfied: scipy>=1.0 in /usr/local/lib/python3.7/dist-packages (from umap-learn) (1.7.3)\n","Requirement already satisfied: numba>=0.49 in /usr/local/lib/python3.7/dist-packages (from umap-learn) (0.51.2)\n","Collecting pynndescent>=0.5\n","  Downloading pynndescent-0.5.7.tar.gz (1.1 MB)\n","\u001b[K     |████████████████████████████████| 1.1 MB 30.6 MB/s \n","\u001b[?25hRequirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from umap-learn) (4.64.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from numba>=0.49->umap-learn) (57.4.0)\n","Requirement already satisfied: llvmlite<0.35,>=0.34.0.dev0 in /usr/local/lib/python3.7/dist-packages (from numba>=0.49->umap-learn) (0.34.0)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from pynndescent>=0.5->umap-learn) (1.1.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.22->umap-learn) (3.1.0)\n","Building wheels for collected packages: umap-learn, pynndescent\n","  Building wheel for umap-learn (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for umap-learn: filename=umap_learn-0.5.3-py3-none-any.whl size=82829 sha256=3ee7fb7e9f170c3e308e22a1bc1cd9ae7321eecaed135961b11870e8ffb4bcd1\n","  Stored in directory: /root/.cache/pip/wheels/b3/52/a5/1fd9e3e76a7ab34f134c07469cd6f16e27ef3a37aeff1fe821\n","  Building wheel for pynndescent (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pynndescent: filename=pynndescent-0.5.7-py3-none-any.whl size=54286 sha256=7480d58114d4c2d5834e83ff247b92c2f347e6c53ff254a5ca28256394a2dd8d\n","  Stored in directory: /root/.cache/pip/wheels/7f/2a/f8/7bd5dcec71bd5c669f6f574db3113513696b98f3f9b51f496c\n","Successfully built umap-learn pynndescent\n","Installing collected packages: pynndescent, umap-learn\n","Successfully installed pynndescent-0.5.7 umap-learn-0.5.3\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting trimap\n","  Downloading trimap-1.1.4-py3-none-any.whl (15 kB)\n","Collecting annoy>=1.11\n","  Downloading annoy-1.17.0.tar.gz (646 kB)\n","\u001b[K     |████████████████████████████████| 646 kB 4.2 MB/s \n","\u001b[?25hRequirement already satisfied: numba>=0.34 in /usr/local/lib/python3.7/dist-packages (from trimap) (0.51.2)\n","Requirement already satisfied: scikit-learn>=0.16 in /usr/local/lib/python3.7/dist-packages (from trimap) (1.0.2)\n","Requirement already satisfied: llvmlite<0.35,>=0.34.0.dev0 in /usr/local/lib/python3.7/dist-packages (from numba>=0.34->trimap) (0.34.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from numba>=0.34->trimap) (57.4.0)\n","Requirement already satisfied: numpy>=1.15 in /usr/local/lib/python3.7/dist-packages (from numba>=0.34->trimap) (1.21.6)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.16->trimap) (1.1.0)\n","Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.16->trimap) (1.7.3)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.16->trimap) (3.1.0)\n","Building wheels for collected packages: annoy\n","  Building wheel for annoy (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for annoy: filename=annoy-1.17.0-cp37-cp37m-linux_x86_64.whl size=391600 sha256=b186fec1b658d3450f455ac2a5fbbe308ab836b4a735373e5b7773036b6e8d00\n","  Stored in directory: /root/.cache/pip/wheels/4f/e8/1e/7cc9ebbfa87a3b9f8ba79408d4d31831d67eea918b679a4c07\n","Successfully built annoy\n","Installing collected packages: annoy, trimap\n","Successfully installed annoy-1.17.0 trimap-1.1.4\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: nltk in /usr/local/lib/python3.7/dist-packages (3.7)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from nltk) (4.64.0)\n","Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.7/dist-packages (from nltk) (2022.6.2)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from nltk) (1.1.0)\n","Requirement already satisfied: click in /usr/local/lib/python3.7/dist-packages (from nltk) (7.1.2)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: gensim in /usr/local/lib/python3.7/dist-packages (3.6.0)\n","Requirement already satisfied: scipy>=0.18.1 in /usr/local/lib/python3.7/dist-packages (from gensim) (1.7.3)\n","Requirement already satisfied: numpy>=1.11.3 in /usr/local/lib/python3.7/dist-packages (from gensim) (1.21.6)\n","Requirement already satisfied: six>=1.5.0 in /usr/local/lib/python3.7/dist-packages (from gensim) (1.15.0)\n","Requirement already satisfied: smart-open>=1.2.1 in /usr/local/lib/python3.7/dist-packages (from gensim) (5.2.1)\n","Mounted at /content/drive\n"]}],"source":["#!pip uninstall umap\n","!pip install umap-learn\n","!pip install trimap\n","!pip install nltk\n","!pip install gensim\n","\n","%load_ext autoreload\n","%autoreload 2\n","from google.colab import drive\n","drive.mount('/content/drive', force_remount=True)\n","import sys\n","sys.path.insert(1, r'/content/drive/MyDrive/STU_Rafae_Baez_Ramirez/New_SNE_Code/')\n","sys.path.insert(1, r'/content/drive/MyDrive/STU_Rafae_Baez_Ramirez/New_SNE_Code/LAPS_and_GAPS-master/')\n","\n","%matplotlib inline\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","import os\n","import sys\n","import math\n","import time\n","import numpy as np\n","import pandas as pd\n","import umap.umap_ as umap\n","import trimap\n","from sklearn.decomposition import PCA, KernelPCA\n","from sklearn.manifold import TSNE, Isomap, MDS\n","\n","\n","from bokeh.io import show, output_notebook, curdoc\n","from bokeh.plotting import figure\n","from bokeh.plotting import figure, output_file, show, ColumnDataSource\n","from bokeh.models import HoverTool\n","from bokeh.io import output_notebook\n","from bokeh.models.glyphs import Text\n","from bokeh.layouts import row\n","from bokeh.io import export_png\n","output_notebook()\n","\n","## Importing local Python files\n","\n","sys.path.append(r'../') \n","from src import Preprocessing, Distances, Explanation, DR_algorithms, genericMethods\n","from src.LAPS_tabular import LapsExplainer\n","from src.GAPS_tabular import GapsExplainer\n","from src.GAPS_Explanation import get_local_explanations_for_GAPS, compute_local_divergences\n","\n","def is_notebook():\n","  try:\n","    shell = get_ipython().__class__.__name__\n","    if shell == 'ZMQInteractiveShell':\n","      return True   # Jupyter notebook or qtconsole\n","    elif shell == 'TerminalInteractiveShell':\n","      return False  # Terminal running IPython\n","    else:\n","      return False  # Other type (?)\n","  except NameError:\n","    return False\n","if is_notebook():\n","    from tqdm.notebook import tqdm\n","else:\n","    from tqdm import tqdm\n","\n","Data_path = r'/content/drive/MyDrive/STU_Rafae_Baez_Ramirez/New_SNE_Code/LAPS_and_GAPS-master/data/'"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"eV62nK1pUgme","executionInfo":{"status":"ok","timestamp":1659209420498,"user_tz":360,"elapsed":5,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}}},"outputs":[],"source":["def LAPS_and_plot(embedding, data_transformed, data_df, y_res, model_feats, targ, cat_feats, cat_names, num_feats, points, neighbors = 20, show_fig = False, verbose = False):\n","  exp = LapsExplainer(data_df.values, feature_names=model_feats, class_names=targ, \n","                      categorical_features=cat_feats, categorical_names=cat_names, \n","                      discretize_continuous=False, discretizer='quartile', random_state=42)\n","  laps_scores_all = []\n","  comp_scores_all = []\n","  bar = tqdm(range(len(points)))\n","\n","  for i in bar:\n","    point = points[i]\n","    start = time.time()\n","    neigh, neigh_emb, over_data, over_data_emb = exp.generate_perturbed_neighborhood(data_df.values, data_transformed, embedding, \n","                                                                                    point, data_df.values[point], nbrs=neighbors, \n","                                                                                    num_features=5, verbose = verbose)\n","    corr_feat_dist, _, _, _, _ = Explanation.explain_point_local(data_df.values[point], neigh, over_data, \n","                                                                model_feats, cat_feats, num_feats)\n","    corr_feat_dist_embd, _, _, _, _ = Explanation.explain_point_local(data_df.values[point], neigh_emb, over_data_emb, \n","                                                                      model_feats, cat_feats, num_feats)\n","    components, divergence = Explanation.compute_local_divergence(corr_feat_dist, corr_feat_dist_embd, \n","                                                                  neigh, neigh_emb)\n","    components = components.split(\",\")\n","    laps_scores_all.append(divergence)\n","    comp_scores_all.append(components)\n","  if show_fig:\n","    idx = [i for i in range(len(y_res))]\n","    colormap = {99: 'Red',\n","                -1: 'white', \n","                0: 'gold', \n","                1: 'peachpuff', \n","                2: 'indigo',\n","                3: 'green',\n","                4: 'darkolivegreen',\n","                5: 'cyan',\n","                6: 'blue',\n","                7: 'lightsteelblue',\n","                8: 'magenta',\n","                9: 'grey',\n","                98: 'limegreen'}\n","    colors = [colormap[z] for z in y_res.ravel()]\n","    labels = {99: 'POI',\n","                -1: 'Class -1', \n","                0: 'Class 0', \n","                1: 'Class 1', \n","                2: 'Class 2',\n","                3: 'Class 3',\n","                4: 'Class 4',\n","                5: 'Class 5',\n","                6: 'Class 6',\n","                7: 'Class 7',\n","                8: 'Class 8',\n","                9: 'Class 9',\n","                98: 'neighborsPOI'} \n","    annotations = [labels[z] for z in y_res.ravel()]\n","    source = ColumnDataSource(\n","          data=dict(\n","              x=embedding[:,0],\n","              y=embedding[:,1],\n","              all_colors = colors,\n","              label = annotations,\n","              indexes = idx\n","          )\n","      )\n","    hover = HoverTool(\n","          tooltips=[\n","              (\"index\", \"$index\"),\n","              (\"(x,y)\", \"($x, $y)\"),\n","          ]\n","      )\n","    curdoc().theme = 'dark_minimal'\n","    p = figure(plot_width=700, plot_height=450, tools=[hover],\n","            title=\"Embedding\")\n","    glyph = Text(x=\"x\", y=\"y\", x_offset=7, y_offset=7, text_font_size=\"9pt\", text_color=\"grey\") # text='indexes'\n","    p.circle('x', 'y', fill_color='all_colors', line_color='white', legend='label', size=10, source=source)\n","    p.add_glyph(source, glyph)\n","    print('Showing Plot')\n","    show(p)\n","  return comp_scores_all, laps_scores_all"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"m2PkjdATUhHr","executionInfo":{"status":"ok","timestamp":1659209420499,"user_tz":360,"elapsed":6,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}}},"outputs":[],"source":["def GAPS_score(embedding, data_transformed, data_df,  model_feats, target, cat_feats, cat_names, num_feats, POI = None, neighbors = 30, num_samples = 50, show_fig = False, verbose = False):\n","  if POI is None:\n","    rep_subset = genericMethods.generate_representative_subset(18, data_df)\n","    data_instance_numbers = rep_subset[0]\n","  else:\n","    data_instance_numbers = POI\n","\n","\n","  explainer = GapsExplainer(data_df.values, feature_names=model_feats,\n","                            class_names=target, categorical_features=cat_feats,\n","                            discretize_continuous=False, discretizer='quartile',\n","                            random_state=42)\n","\n","  neigh, neigh_emb, over_data, over_data_emb, local_feat_cont, local_feat_cont_emb, neigh_local, neigh_emb_local = explainer.generate_perturbed_neighborhood_global(\n","      data_df.values, data_transformed, embedding, data_instance_numbers, model_feats, cat_feats, num_feats, nbrs = neighbors, num_features = 5, num_samples=num_samples, verbose = verbose)\n","\n","  local_divergences = compute_local_divergences(neigh_local, neigh_emb_local, local_feat_cont, local_feat_cont_emb)\n","\n","  corr_feat_dist, _, _ = Explanation.explain_point_global(over_data, model_feats, cat_feats, num_feats, verbose=verbose)\n","  corr_feat_dist_embd, _, _ = Explanation.explain_point_global(over_data_emb, model_feats, cat_feats, num_feats, verbose=verbose)\n","\n","  components, overall_divergence = Explanation.compute_global_divergence(corr_feat_dist, corr_feat_dist_embd, neigh, neigh_emb, local_divergences)\n","  components = components.split(',')\n","  return components, overall_divergence\n"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"_j9vTpBEUjAx","executionInfo":{"status":"ok","timestamp":1659209420752,"user_tz":360,"elapsed":258,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}}},"outputs":[],"source":["def load_data(data_path = Data_path, dataset_name = 'breast_cancer', amountPOI = 100, seed = 2022, max_samples = 10000):\n","  if dataset_name == 'spam':\n","    df = pd.DataFrame(spam_data)\n","  elif dataset_name == 'sentiment':\n","    df = pd.DataFrame(sentiment_data)\n","  else:\n","    df = pd.read_csv(data_path + dataset_name + '.csv')\n","  df = df.fillna(0)\n","  if df.shape[0] > max_samples:\n","    df = df.sample(max_samples)\n","  df.reset_index(inplace = True, drop = True)\n","  df.head()\n","  \n","  model_features, target = Preprocessing.set_features_and_target(df)\n","\n","  y = (df[target].values.reshape(-1, ))\n","  X_df = pd.DataFrame(df, columns=model_features)\n","\n","  np.random.seed(seed)\n","  POI = np.random.randint(0, X_df.shape[0], amountPOI)\n","\n","  X_transformed, categorical_features, numeric_features, categorical_names = Preprocessing.identify_and_transform_features(df, model_features)\n","\n","  params = [X_df, y, model_features, target, categorical_features, categorical_names, numeric_features, POI]\n","  return X_transformed, params"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"R7WNPzKzUlG4","executionInfo":{"status":"ok","timestamp":1659209424534,"user_tz":360,"elapsed":3783,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}}},"outputs":[],"source":["from fSNE_torch import fSNE_torch"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"JNw_LZv9U1Os","executionInfo":{"status":"ok","timestamp":1659209424536,"user_tz":360,"elapsed":8,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}}},"outputs":[],"source":["#datasets = ['breast_cancer.csv', 'Credit_card.csv', 'Magic.csv', 'Wine_Quality.csv', 'spam', 'sentiment']\n","datasets = ['breast_cancer.csv', 'Credit_card.csv', 'Magic.csv', 'Wine_Quality.csv']\n","#datasets = ['Credit_card.csv', 'Magic.csv', 'Wine_Quality.csv']\n","dr_algo_name = ['fSNE','SNE']\n","perplexities = [10,20,30,40,50]\n","iterations = 1000\n","amountPOI = 100"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"rWpZKTJpU31p","executionInfo":{"status":"ok","timestamp":1659209427315,"user_tz":360,"elapsed":2787,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}}},"outputs":[],"source":["from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import accuracy_score\n","datas_perp = np.load(Data_path+'spec_datasets_perp.npy', allow_pickle=True).item()"]},{"cell_type":"code","source":["laps_scores = np.load(Data_path+'laps_scores1.npy', allow_pickle=True)\n","knn_score = np.load(Data_path+'knn_scores1.npy', allow_pickle=True)\n","embeddings = np.load(Data_path+'embs1.npy', allow_pickle=True)\n","laps_scores = dict(laps_scores.item())\n","knn_scores = dict(knn_score.item())\n","embeddings = dict(embeddings.item())\n","print(laps_scores.keys())\n","print(knn_scores.keys())\n","print(embeddings.keys())\n","print(laps_scores['breast_cancer_fSNE_10'])\n","print(knn_scores['breast_cancer_fSNE_10'])\n","print(embeddings['breast_cancer_fSNE_10'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iTzM1IreC-Ai","executionInfo":{"status":"ok","timestamp":1659209429205,"user_tz":360,"elapsed":1894,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}},"outputId":"7588b1c0-e2a5-4fae-c951-31bdddc92aa3"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["dict_keys(['breast_cancer_fSNE_10', 'breast_cancer_SNE_10', 'breast_cancer_fSNE_20', 'breast_cancer_SNE_20', 'breast_cancer_fSNE_30', 'breast_cancer_SNE_30', 'breast_cancer_fSNE_40', 'breast_cancer_SNE_40', 'breast_cancer_fSNE_50', 'breast_cancer_SNE_50'])\n","dict_keys(['breast_cancer_fSNE_10', 'breast_cancer_SNE_10', 'breast_cancer_fSNE_20', 'breast_cancer_SNE_20', 'breast_cancer_fSNE_30', 'breast_cancer_SNE_30', 'breast_cancer_fSNE_40', 'breast_cancer_SNE_40', 'breast_cancer_fSNE_50', 'breast_cancer_SNE_50'])\n","dict_keys(['breast_cancer_fSNE_10', 'breast_cancer_SNE_10', 'breast_cancer_fSNE_20', 'breast_cancer_SNE_20', 'breast_cancer_fSNE_30', 'breast_cancer_SNE_30', 'breast_cancer_fSNE_40', 'breast_cancer_SNE_40', 'breast_cancer_fSNE_50', 'breast_cancer_SNE_50'])\n","['0.72838', '0.72203', '0.72750', '0.72869', '0.72972']\n","['0.98', '0.95', '0.98', '0.98', '0.96']\n","[array([[-1.96825402,  8.79876225],\n","       [-0.38711073,  4.03854833],\n","       [-2.54596038,  6.64325201],\n","       ...,\n","       [-1.49931125,  3.02216702],\n","       [-3.51785586,  7.49515889],\n","       [ 2.74395641, -3.73618094]]), array([[-7.22039378,  0.2209868 ],\n","       [-1.40692684, -1.70384958],\n","       [-5.28860004, -1.24226558],\n","       ...,\n","       [-1.20864359, -2.69546208],\n","       [-6.46383762, -1.68404017],\n","       [ 5.27593108,  3.21846313]]), array([[ 2.43717675,  6.51737162],\n","       [ 1.13795402,  1.7914589 ],\n","       [ 3.12022437,  4.35875626],\n","       ...,\n","       [ 2.17894743,  0.58072789],\n","       [ 4.08743847,  5.23515008],\n","       [-4.25589926, -4.66832678]]), array([[-6.99151362, -2.22179333],\n","       [-1.99948997, -1.40066835],\n","       [-5.36117171, -0.71020024],\n","       ...,\n","       [-1.67758743,  0.05471893],\n","       [-6.56507021, -0.25954479],\n","       [ 6.21923402,  0.21038697]]), array([[ 6.90900023,  0.57834523],\n","       [ 1.78059718, -0.86516971],\n","       [ 5.03268059, -0.66750128],\n","       ...,\n","       [ 1.32458992, -2.20432929],\n","       [ 6.17854996, -1.26717182],\n","       [-5.52889804, -1.82247968]])]\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LFAdtY-OVEmR","colab":{"base_uri":"https://localhost:8080/","height":707},"executionInfo":{"status":"error","timestamp":1659186616440,"user_tz":360,"elapsed":2201849,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}},"outputId":"c82387ab-c8cd-4cf5-dc4b-79aeba8547b2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Skipping breast_cancer_fSNE_10\n","Skipping breast_cancer_SNE_10\n","Skipping breast_cancer_fSNE_20\n","Skipping breast_cancer_SNE_20\n","Skipping breast_cancer_fSNE_30\n","Skipping breast_cancer_SNE_30\n","Skipping breast_cancer_fSNE_40\n","Skipping breast_cancer_SNE_40\n","Skipping breast_cancer_fSNE_50\n","Skipping breast_cancer_SNE_50\n","Working on Credit_card_fSNE_10\n"]},{"output_type":"stream","name":"stderr","text":["using cpu\n","Cost: 32158.38963:  32%|███▏      | 323/1000 [35:29<1:14:22,  6.59s/it]\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-aa96cf5317b1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     27\u001b[0m         \u001b[0membs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m           \u001b[0membedding\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdr_algo\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     30\u001b[0m           \u001b[0;32mwhile\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misnan\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0membedding\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m             \u001b[0membedding\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdr_algo\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/content/drive/MyDrive/STU_Rafae_Baez_Ramirez/New_SNE_Code/fSNE_torch.py\u001b[0m in \u001b[0;36mfit_transform\u001b[0;34m(self, verbose)\u001b[0m\n\u001b[1;32m    208\u001b[0m           \u001b[0mloop2Grad2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlambdas\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mYi_minus_Yj\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnotPOI\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtranspose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mq_matrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnotPOI\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munsqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mcache_POI\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnotPOI\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munsqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdim\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    209\u001b[0m           \u001b[0mloop2Grad3\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlambdas\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mYi_minus_Yj_nPOI\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mp_matrix_nPOI\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mq_matrix_nPOI\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdim\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 210\u001b[0;31m           \u001b[0mloop2Grad4\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlambdas\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mcache_nPOI\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnotPOI\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munsqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mq_matrix_nPOI\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mYi_minus_Yj_nPOI\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdim\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    211\u001b[0m           \u001b[0mloop2Grad5\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlambdas\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mp_matrix_nPOI\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mYi_minus_Yj_nPOI\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdim\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    212\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["\n","\n","# embeddings = {}\n","# laps_scores = {}\n","# knn_scores = {}\n","#gaps_scores = {}\n","\n","runs = 5\n","\n","for k in range(len(datasets)):\n","  (X_transformed, params) = datas_perp[datasets[k]]\n","  for p in perplexities:\n","    orig_neigh = KNeighborsClassifier(n_neighbors=p)\n","    orig_neigh.fit(X_transformed, params[1])\n","    orig_pred = orig_neigh.predict(X_transformed[params[5]])\n","    dr_algo = [fSNE_torch(X_transformed, max_iter=iterations, perp=p, POI=params[5], ES = 10, lambdas = 2),\n","               fSNE_torch(X_transformed, max_iter=iterations, perp=p, POI=[], ES = 10, lambdas = 1)]\n","    for i in range(len(dr_algo)):\n","      key = f'{datasets[k][:-4]}_{dr_algo_name[i]}_{p}'\n","      if key in embeddings.keys():\n","        print(f'Skipping {key}')\n","      else:\n","        print(f'Working on {key}')\n","        #gaps_ls = []\n","        laps_ls = []\n","        knn_ls = []\n","        embs = []\n","        for j in range(3):\n","          embedding = dr_algo[i].fit_transform()\n","          while np.isnan(embedding).any():\n","            embedding = dr_algo[i].fit_transform()\n","          embs.append(embedding)\n","          if not np.isnan(embedding).any():\n","            # _, gaps_div = GAPS_score(embedding, X_transformed, \n","            #                       params[0], params[2],\n","            #                       params[3], [],\n","            #                       [], params[4],\n","            #                       params[5], neighbors = 5, num_samples = 5, show_fig=False, verbose = False)\n","            _, laps_div = LAPS_and_plot(embedding, X_transformed,\n","                                    params[0], params[1],\n","                                    params[2], params[3],\n","                                    [], [],\n","                                    params[4], params[5],\n","                                    neighbors = p, show_fig = False, verbose = False)\n","            neigh = KNeighborsClassifier(n_neighbors=p)\n","            neigh.fit(embedding, params[1])\n","            new_pred = neigh.predict(embedding[params[5]])\n","\n","            #gaps = f'{np.mean(gaps_div):.5f}'\n","            laps = f'{np.mean(laps_div):.5f}'\n","            knn = f'{accuracy_score(orig_pred, new_pred)}'\n","            \n","            #print(f'{key}')\n","            #print(f'GAPS score = {gaps}')\n","            print(f'KNN classifier score = {knn}')\n","            print(f'LAPS score = {laps}')\n","            #gaps_ls.append(gaps)\n","            knn_ls.append(knn)\n","            laps_ls.append(laps)\n","\n","        #gaps_scores[key] = gaps_ls\n","        laps_scores[key] = laps_ls\n","        knn_scores[key] = knn_ls\n","        embeddings[key] = embs\n","        np.save(Data_path+'laps_scores1', laps_scores, allow_pickle=True)\n","        np.save(Data_path+'knn_scores1', knn_scores, allow_pickle=True)\n","        np.save(Data_path+'embs1', embeddings, allow_pickle=True)\n","\n","embeddings = np.load(Data_path+'embs1', allow_pickle=True).item()\n","gaps_scores = {}\n","\n","runs = 5\n","\n","for k in range(len(datasets)):\n","  (X_transformed, params) = datas_perp[datasets[k]]\n","  for p in perplexities:\n","    for i in range(len(dr_algo)):\n","      key = f'{datasets[k][:-4]}_{dr_algo_name[i]}_{p}'\n","      print(f'Working on {key}')\n","      gaps_ls = []\n","      embs = []\n","      for j in range(5):\n","        embedding = embeddings[key][j]\n","        _, gaps_div = GAPS_score(embedding, X_transformed, \n","                              params[0], params[2],\n","                              params[3], [],\n","                              [], params[4],\n","                              params[5], neighbors = 5, num_samples = 5, show_fig=False, verbose = False)\n","        gaps = f'{np.mean(gaps_div):.5f}'\n","        print(f'GAPS score = {gaps}')\n","        gaps_ls.append(gaps)\n","\n","      gaps_scores[key] = gaps_ls\n","      np.save(Data_path+'gaps_scores1', gaps_scores, allow_pickle=True)"]},{"cell_type":"code","source":["\n","# embeddings = {}\n","# laps_scores = {}\n","# knn_scores = {}\n","#gaps_scores = {}\n","gaps_scores = dict(np.load(Data_path+'gaps_scores.npy', allow_pickle=True).item())\n","datasets = ['breast_cancer.csv']\n","runs = 5\n","\n","for k in range(len(datasets)):\n","  (X_transformed, params) = datas_perp[datasets[k]]\n","  for p in perplexities:\n","    for i in range(2):\n","      key = f'{datasets[k][:-4]}_{dr_algo_name[i]}_{p}'\n","      print(f'Working on {key}')\n","      gaps_ls = []\n","      for j in range(3):\n","        embedding = embeddings[key][j]\n","\n","        _, gaps_div = GAPS_score(embedding, X_transformed, \n","                              params[0], params[2],\n","                              params[3], [],\n","                              [], params[4],\n","                              params[5], neighbors = 5, num_samples = 2, show_fig=False, verbose = False)\n","        gaps = f'{np.mean(gaps_div):.5f}'\n","        print(f'{key}')\n","        print(f'GAPS score = {gaps}')\n","        gaps_ls.append(gaps)\n","\n","\n","      gaps_scores[key] = gaps_ls\n","      np.save(Data_path+'gaps_scores', gaps_scores, allow_pickle=True)\n"],"metadata":{"id":"Dfxq1k0tFVDS","executionInfo":{"status":"ok","timestamp":1659212450942,"user_tz":360,"elapsed":1660614,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"768ce9d1-0d12-45b7-b2ee-a14fb4e8c7a9"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Working on breast_cancer_fSNE_10\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_10\n","GAPS score = 0.02302\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_10\n","GAPS score = 0.02374\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_10\n","GAPS score = 0.02302\n","Working on breast_cancer_SNE_10\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_10\n","GAPS score = 0.02282\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_10\n","GAPS score = 0.02231\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_10\n","GAPS score = 0.02282\n","Working on breast_cancer_fSNE_20\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_20\n","GAPS score = 0.02196\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_20\n","GAPS score = 0.02228\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_20\n","GAPS score = 0.02266\n","Working on breast_cancer_SNE_20\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_20\n","GAPS score = 0.02143\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_20\n","GAPS score = 0.02134\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_20\n","GAPS score = 0.02134\n","Working on breast_cancer_fSNE_30\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_30\n","GAPS score = 0.02174\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_30\n","GAPS score = 0.02131\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_30\n","GAPS score = 0.02130\n","Working on breast_cancer_SNE_30\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_30\n","GAPS score = 0.02092\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_30\n","GAPS score = 0.02090\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_30\n","GAPS score = 0.02092\n","Working on breast_cancer_fSNE_40\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_40\n","GAPS score = 0.02111\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_40\n","GAPS score = 0.02146\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_40\n","GAPS score = 0.02114\n","Working on breast_cancer_SNE_40\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_40\n","GAPS score = 0.02042\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_40\n","GAPS score = 0.02042\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_40\n","GAPS score = 0.02042\n","Working on breast_cancer_fSNE_50\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_50\n","GAPS score = 0.02106\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_50\n","GAPS score = 0.02121\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_fSNE_50\n","GAPS score = 0.02111\n","Working on breast_cancer_SNE_50\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_50\n","GAPS score = 0.02073\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_50\n","GAPS score = 0.02073\n","num_samples = 2\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","Step 1/4\n","Step 2/4\n","Step 3/4\n","Step 4/4\n","breast_cancer_SNE_50\n","GAPS score = 0.02076\n"]}]},{"cell_type":"code","source":["np.save(Data_path+'gaps_scores1', gaps_scores, allow_pickle=True)\n"],"metadata":{"id":"9jn7WRYZqiAm","executionInfo":{"status":"ok","timestamp":1659212566318,"user_tz":360,"elapsed":295,"user":{"displayName":"Rafael Baez Ramirez","userId":"03368220388201059112"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"J_Z9pzGDxovt"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"background_execution":"on","collapsed_sections":[],"name":"runsLAPSTests1","provenance":[],"machine_shape":"hm","authorship_tag":"ABX9TyOsh3jUdzqWdBJIoO1M9Vfj"},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}